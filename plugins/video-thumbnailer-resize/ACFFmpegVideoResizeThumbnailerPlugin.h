/**
 * @brief A plugin that reduces the video dimensions proportionally into a video thumbnail through the ffmpeg commandline
 * @author Christian Frisson
 * @date 16/12/2012
 * @copyright (c) 2012 – UMONS - Numediart
 * 
 * MediaCycle of University of Mons – Numediart institute is 
 * licensed under the GNU AFFERO GENERAL PUBLIC LICENSE Version 3 
 * licence (the “License”); you may not use this file except in compliance 
 * with the License.
 * 
 * This program is free software: you can redistribute it and/or 
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 * 
 * Each use of this software must be attributed to University of Mons – 
 * Numediart Institute
 * 
 * Any other additional authorizations may be asked to avre@umons.ac.be 
 * <mailto:avre@umons.ac.be>
 */

#ifndef _ACFFmpegVideoResizeThumbnailerPlugin_H
#define	_ACFFmpegVideoResizeThumbnailerPlugin_H

#include <MediaCycle.h>
#include<ACFFmpegInclude.h>

/// ACFFmpegCommandline.h is automatically generated by CMake and provides the full path of the ffmpeg commandline application as string named ffmpeg_cmd
#include "ACFFmpegCommandline.h"

#include<iostream>

class ACFFmpegVideoResizeThumbnailerPlugin : public ACThumbnailerPlugin {
public:
    ACFFmpegVideoResizeThumbnailerPlugin();
    ~ACFFmpegVideoResizeThumbnailerPlugin();

    virtual std::vector<std::string> getThumbnailNames()
    {
        std::vector<std::string> name;
        name.push_back("Timeline Resized");
        return name;
    }

    virtual std::map<std::string,std::string> getThumbnailDescriptions()
    {
        std::map<std::string,std::string> desc;
        desc["Timeline Resized"] = "Reduces the video dimensions proportionally, the higher not exceeding 100 pixels";
        return desc;
    }

    virtual std::map<std::string,ACMediaType> getThumbnailTypes(){
        std::map<std::string,ACMediaType> type;
        type["Timeline Resized"] = MEDIA_TYPE_VIDEO;
        return type;
    }

    virtual std::map<std::string,std::string> getThumbnailExtensions(){
        std::map<std::string,std::string> ext;
        ext["Timeline Resized"] = ".mp4";
        return ext;
    }

    virtual std::vector<std::string> requiresFeaturesPlugins() // list of plugin names (not paths)
    {
        return std::vector<std::string>();
    }

    virtual std::vector<std::string> requiresSegmentationPlugins() // list of plugin names (not paths)
    {
        return std::vector<std::string>();
    }

    virtual std::vector<ACMediaThumbnail*> summarize(ACMedia* theMedia);
protected:
    bool scale_video(std::string _media_filename, std::string _thumbnail_filename,int _width,int _height);
    int max_dimension;
};
#endif	/* _ACFFmpegVideoResizeThumbnailerPlugin_H */
