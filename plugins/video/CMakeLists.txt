SET(MEDIA_TYPE "video")
SET(PLUGIN_NAME "video")
SET(MC_3RDPARTIES "cvBlobsLib;cvgabor")
SET(MC_MEDIA_LIBS "${MEDIA_TYPE}-core;${MEDIA_TYPE}-features;image-core;image-features")
list(APPEND 3RDPARTY_NAMES "cvBlobsLib")
list(APPEND 3RDPARTY_LICENSES "free")
list(APPEND 3RDPARTY_URLS "http://opencv.willowgarage.com/wiki/cvBlobsLib")
list(APPEND 3RDPARTY_NAMES "cvgabor")
list(APPEND 3RDPARTY_LICENSES "GPL")
list(APPEND 3RDPARTY_URLS "http://code.google.com/p/cvgabor/")
list(APPEND 3RDPARTY_NAMES "fftw3")
list(APPEND 3RDPARTY_LICENSES "GPL")
list(APPEND 3RDPARTY_URLS "http://www.fftw.org")
list(APPEND 3RDPARTY_NAMES "OpenCV")
list(APPEND 3RDPARTY_LICENSES "BSD")
list(APPEND 3RDPARTY_URLS "http://opencv.willowgarage.com")
IF(SUPPORT_VIDEO AND OpenCV_FOUND AND FFTW3_FOUND)
        # Find the chosen Haar cascade and make it accessible from the NumberOfFaces plugin through ACHaarCascade.h
        SET(OpenCV_HAARCASCADE "haarcascade_frontalface_alt.xml")
        IF(EXISTS ${CMAKE_CURRENT_BINARY_DIR}/ACHaarCascade.h)
            execute_process(COMMAND "rm" "${CMAKE_CURRENT_BINARY_DIR}/ACHaarCascade.h")
        ENDIF()
        find_path(OpenCV_HAARCASCADES_DIR NAMES ${OpenCV_HAARCASCADE} PATH_SUFFIXES share/OpenCV/haarcascades share/opencv/haarcascades)
        IF(NOT OpenCV_HAARCASCADES_DIR)
            MESSAGE(FATAL_ERROR "Haar cascade ${OpenCV_HAARCASCADE} not found, please adapt the possible path suffixes in ${CMAKE_CURRENT_SOURCE_DIR}/CMakeLists.txt")
        ENDIF()

        IF(APPLE AND NOT USE_DEBUG)
                file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/ACHaarCascade.h "static std::string haar_cascade = getExecutablePath() + \"${OpenCV_HAARCASCADE}\";")
        ELSE()

                IF(WIN32 AND MINGW)
                        EXECUTE_PROCESS(COMMAND cp "${OpenCV_HAARCASCADES_DIR}/${OpenCV_HAARCASCADE}" "${CMAKE_CURRENT_BINARY_DIR}")
                        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/ACHaarCascade.h "static std::string haar_cascade = \"${OpenCV_HAARCASCADE}\";")
                ELSE()
                        file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/ACHaarCascade.h "static std::string haar_cascade = \"${OpenCV_HAARCASCADES_DIR}/${OpenCV_HAARCASCADE}\";")
                ENDIF()
        ENDIF()

        INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
        INCLUDE (${CMAKE_SOURCE_DIR}/cmake/AddMediaCyclePlugin.cmake)
	ADD_MC_PLUGIN_LIBRARY(${PLUGIN_NAME})
	MESSAGE("[X] ${PLUGIN_PREFIX}${PLUGIN_NAME}")
ELSE()
	MESSAGE("[ ] ${PLUGIN_PREFIX}${PLUGIN_NAME}")
ENDIF()
