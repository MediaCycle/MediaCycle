PROJECT(MediaCycle)

# add some find scripts
# SET(CMAKE_USE_RELATIVE_PATHS YES)
SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/CMakeModules")
MESSAGE ( "modules in " ${CMAKE_MODULE_PATH} )

cmake_minimum_required(VERSION 2.6.2)
#MESSAGE(${CMAKE_VERSION})

IF(COMMAND cmake_policy)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.0")
		#AM: don't know which is the best, but must be < CMP0008 for cmake 2.6.0 and < CMP0012 for cmake 2.6.4
		cmake_policy(SET CMP0003 NEW) 
	ELSE()
		cmake_policy(SET CMP0014 NEW)
	ENDIF ( )
ENDIF(COMMAND cmake_policy)

IF (APPLE_IOS_DEV OR APPLE_IOS_SIM)
	# Force gcc <= 4.2 on iPhone
	include(CMakeForceCompiler)
	CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
	CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)
ENDIF ()

# Checking Apple OSX versions
IF (APPLE)
	IF(${CMAKE_SYSTEM_VERSION} MATCHES "10.")
		SET(APPLE_SNOW_LEOPARD ON)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_SNOW_LEOPARD")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_SNOW_LEOPARD")
	ELSEIF(${CMAKE_SYSTEM_VERSION} MATCHES "9.")
		SET(APPLE_LEOPARD ON)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_LEOPARD")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_LEOPARD")
	ENDIF()
ENDIF()

#options
OPTION(APPLE_IOS_DEV "Cross-compile for iPhone OS Device" OFF)
OPTION(APPLE_IOS_SIM "Cross-compile for iPhone OS Simulator" OFF)
OPTION(APPLE_IOS_XCODE "Generate an XCode project for cross-compiling for the iPhone OS" OFF)
OPTION(USE_DEBUG "Use Debug" ON)
OPTION(USE_OPENGL "Use OpenGL" ON)
#OPTION(USE_OSG "Use OSG" ON) # Currently required in the core for 3D models
SET(USE_OSG ON)
#OPTION(USE_OPENAL "Use OpenAL" ON)
SET(USE_OPENAL ON)
#IF ( NOT APPLE_LEOPARD )
#	OPTION(USE_ALUT "Use ALUT" ON)
#ENDIF ( )
IF ( NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
	IF(APPLE)
		OPTION(USE_COCOA "Use Cocoa" ON)
	ENDIF()
	OPTION(USE_QT4 "Use Qt4 Toolkit" ON)
	OPTION(USE_OSC "Use OpenSoundControl" ON)
	OPTION(USE_AUDIOFEAT "Using audio features" ON)
	OPTION(USE_LAUGHFEAT "Using laugh features" ON)
	OPTION(USE_PSYCLONE "Use Psyclone" OFF)
	OPTION(BUILD_TESTS "Build tests" ON)
	OPTION(BUILD_PLUGINS "Build plugins" ON)
	OPTION(USE_AUDIOGARDEN "Use audiogarden" ON)
	OPTION(USE_VAMP "Use VAMP plugin SDK" ON)
ENDIF()	
OPTION(BUILD_APPS "Build apps" ON)	
OPTION(USE_SDIF "Use SDIF" OFF)

IF (APPLE_IOS_DEV OR APPLE_IOS_SIM)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.2")
		MESSAGE(FATAL_ERROR "Generating an Makefile project for iPhone OS Device/Simulator requires CMake version 2.8.2 and up.")
	ENDIF()
ENDIF()
IF (APPLE_IOS_XCODE AND NOT(${CMAKE_VERSION} STREQUAL "2.8.0"))
	MESSAGE(FATAL_ERROR "Generating an XCode project for iPhone OS works with CMake v. 2.8.0 only (2.8.2 produces corrupted project files).")
ENDIF()

IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
	IF( APPLE_IOS_DEV AND APPLE_IOS_SIM )
		MESSAGE(FATAL_ERROR "Cross-compile for iPhone OS Device OR Simulator at one time!")
	ENDIF()
	IF( NOT APPLE )
		MESSAGE(FATAL_ERROR "Cross-compiling for iPhone OS Device or Simulator works currently only on Apple OSX systems")
	ENDIF()

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_IOS")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_IOS")
ENDIF()

IF ( WIN32 )
	INCLUDE_DIRECTORIES(. core)
	SUBDIRS(core gui)
ELSE ( WIN32 )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		INCLUDE_DIRECTORIES(. core)
		SUBDIRS(core gui fftooura lib)	
	ELSE()
		INCLUDE_DIRECTORIES(. core gnuplot_i)
		SUBDIRS(core cli gui fftooura gnuplot_i lib vamp-plugin-interface)	
	ENDIF()
ENDIF ( WIN32 )

IF ( UNIX )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	SET(OpenCV_ROOT_DIR "/usr")#CF
ENDIF ( UNIX )

#config
SET(PLUGIN_PREFIX "mc_")
# SET(PLUGIN_SUFFIX ".mcp") #change OS-dependent extension (so, dll, dynlib) to a fixed one (.mcp)

#CPack
IF ( UNIX OR APPLE )
	#http://www.cmake.org/Wiki/CMake:Packaging_With_CPack
	#enables packaging (ubuntu : .deb, .sh, .tar.gz, .tar.Z, other platforms : ?)
	#to build packages, use: make package
	#to enable .deb build (disabled by default) use: cmake .. -DCPACK_BINARY_DEB:BOOL=on
	#SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "numediart")

	INCLUDE(InstallRequiredSystemLibraries)

	#SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MediaCycle")
	SET(CPACK_PACKAGE_VENDOR "numediart")
	#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ReadMe.txt")
	#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt")
	#SET(CPACK_PACKAGE_VERSION_MAJOR "1")
	#SET(CPACK_PACKAGE_VERSION_MINOR "3")
	#SET(CPACK_PACKAGE_VERSION_PATCH "2")
	#SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
	#IF(WIN32 AND NOT UNIX)
 		# There is a bug in NSI that does not handle full unix paths properly. Make
		# sure there is at least one set of four (4) backlasshes.
		#SET(CPACK_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\InstallIcon.bmp")
 		#SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\MyExecutable.exe")
 		#SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_INSTALL_DIRECTORY} My Famous Project")
		#SET(CPACK_NSIS_HELP_LINK "http:\\\\\\\\www.my-project-home-page.org")
		#SET(CPACK_NSIS_URL_INFO_ABOUT "http:\\\\\\\\www.my-personal-home-page.com")
		#SET(CPACK_NSIS_CONTACT "me@my-personal-home-page.com")
		#SET(CPACK_NSIS_MODIFY_PATH ON)
	#ELSE(WIN32 AND NOT UNIX)
  		#SET(CPACK_STRIP_FILES "bin/MyExecutable")
  		#SET(CPACK_SOURCE_STRIP_FILES "")
	#ENDIF(WIN32 AND NOT UNIX)
	#SET(CPACK_PACKAGE_EXECUTABLES "MyExecutable" "My Executable")
	INCLUDE(CPack)
ENDIF ( UNIX OR APPLE )

IF ( WIN32 )
	SET(BUILD_TESTS OFF)
	SET(BUILD_PLUGINS OFF)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(BUILD_SHARED_LIBS OFF)
ENDIF ( WIN32 )

IF ( APPLE )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
			INCLUDE_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/include" )
			LINK_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/lib" )
		ENDIF()
		IF ( APPLE_IOS_XCODE )
			# Basic iPhone SDK detection (we need v. 4.2 currently, 4.1 unsupported)
			IF(EXISTS /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk)
				SET(iPhoneOS_SDK_FOUND TRUE)
			ENDIF()
			IF(EXISTS /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk)
				SET(iPhoneSimulator_SDK_FOUND TRUE)
			ENDIF()
			IF (iPhoneOS_SDK_FOUND AND iPhoneSimulator_SDK_FOUND)
				MESSAGE("Found iPhone SDK v.4.2")
				set(iPhoneOS_SDK_ROOT "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk")
				set(iPhoneSimulator_SDK_ROOT "/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk")
				set(iPhoneOS_DEPS_ROOT "/opt/ios/device/4.2")
				set(iPhoneSimulator_DEPS_ROOT "/opt/ios/simulator/4.2")

  				# Force gcc <= 4.2 on iPhone
  				include(CMakeForceCompiler)
  				CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
  				CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)

				SET(CMAKE_BUILD_TYPE Release)
				SET(CMAKE_FIND_ROOT_PATH "${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_DEPS_ROOT}" "${iPhoneSimulator_DEPS_ROOT}")
				SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
				SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
				SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				SET(OpenCV_ROOT_DIR "${iPhoneSimulator_DEPS_ROOT}")

				# Set build variables
				set(CMAKE_OSX_SYSROOT iphoneos4.2)
				set(CMAKE_OSX_DEPLOYMENT_TARGET "")
				set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_UNIVERSAL_IPHONE_OS)")
				set(CMAKE_EXE_LINKER_FLAGS "-framework Foundation -framework CoreGraphics -framework QuartzCore -framework UIKit")
				set(XCODE_ATTRIBUTE_SDKROOT iphoneos4.2)
				set(MACOSX_BUNDLE_GUI_IDENTIFIER "com.yourcompany.\${PRODUCT_NAME:rfc1034identifier}")
				add_definitions(-fno-regmove)
				remove_definitions(-msse)
			ELSE()
				MESSAGE(FATAL_ERROR "iPhone SDK v.4.2 required")
			ENDIF()
		ENDIF()
	ELSE()
		INCLUDE_DIRECTORIES( "/opt/local/include" )
		INCLUDE_DIRECTORIES( "/opt/local" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local/lib" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local" )
		SET(OpenCV_ROOT_DIR "/opt/local")#CF
	ENDIF()
ENDIF ( APPLE )

# OSC
IF ( USE_OSC )
	INCLUDE_DIRECTORIES(io)
	SUBDIRS(io)
ENDIF ( USE_OSC )

# APPS
IF ( BUILD_APPS )
	INCLUDE_DIRECTORIES(apps)
	SUBDIRS(apps)
ENDIF ( BUILD_APPS )

IF ( BUILD_TESTS )
	SUBDIRS(test tinyxml)
ENDIF ( BUILD_TESTS )

IF ( BUILD_PLUGINS )
	SUBDIRS(plugins)
ENDIF ( BUILD_PLUGINS )

IF (USE_AUDIOGARDEN)
	#SUBDIRS( ../../../../../audiogarden/ )
	SUBDIRS(audiogarden)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOGARDEN")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOGARDEN")
ENDIF (USE_AUDIOGARDEN)

IF ( USE_DEBUG )
	MESSAGE( "Configured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_VERBOSE_MAKEFILE ON)
ELSE ( USE_DEBUG )
	MESSAGE( "Configured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O0")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF ( USE_DEBUG )

#Threads
FIND_PACKAGE ( Threads )

#Boost (serialization + system + filesystem + graph)
FIND_PACKAGE ( Boost REQUIRED COMPONENTS serialization system filesystem graph)
IF ( Boost_FOUND )
	MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
	IF ( WIN32 )
		SET( Boost_USE_STATIC_LIBS ON)
	ENDIF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_BOOST")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST")
	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	#LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${Boost_LIBRARY_DIRS} )
	MESSAGE("Using Boost libraries: ${Boost_SERIALIZATION_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_GRAPH_LIBRARY}")
ELSE ( Boost_FOUND )
	MESSAGE(FATAL_ERROR "Boost requested but not found.")
ENDIF ( Boost_FOUND )

# FFmpeg, used as plugin for OSG and OpenCV
# TODO: if FFmpeg found, check for OSG and OpenCV plugins
# TODO: replace libsndfile/libsamplerate with FFmpeg for audio?
FIND_PACKAGE( FFmpeg )
MESSAGE("Looking for FFmpeg libraries.")
IF(FFMPEG_LIBAVFORMAT_FOUND)
	MESSAGE("  avformat library found in ${FFMPEG_LIBAVFORMAT_LIBRARIES}.")
ELSE()
	MESSAGE("  avformat library not found.")
ENDIF()
IF(FFMPEG_LIBAVDEVICE_FOUND)
	MESSAGE("  avdevice library found in ${FFMPEG_LIBAVDEVICE_LIBRARIES}.")
ELSE()
	MESSAGE("  avdevice library not found.")
ENDIF()
IF(FFMPEG_LIBAVCODEC_FOUND)
	MESSAGE("  avcodec library found in ${FFMPEG_LIBAVCODEC_LIBRARIES}.")
ELSE()
	MESSAGE("  avcodec library not found.")
ENDIF()
IF(FFMPEG_LIBAVUTIL_FOUND)
	MESSAGE("  avutil library found in ${FFMPEG_LIBAVUTIL_LIBRARIES}.")
ELSE()
	MESSAGE("  avutil library not found.")
ENDIF()
IF(FFMPEG_LIBSWSCALE_FOUND)
	MESSAGE("  swscale library found in ${FFMPEG_LIBSWSCALE_LIBRARIES}.")
ELSE()
	MESSAGE("  swscale library not found.")
ENDIF()
IF(FFMPEG_FOUND)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_FFMPEG")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_FFMPEG")
	INCLUDE_DIRECTORIES(${FFMPEG_INCLUDE_DIR})
	MESSAGE("Found all FFmpeg libraries in ${FFMPEG_LIBRARIES}.")
ELSE()
	MESSAGE(FATAL_ERROR "Some FFmpeg libraries are missing.")
ENDIF()

IF(CMAKE_COMPILER_IS_GNUCXX)
    # Remove -pedantic flag as it barfs on ffmpeg headers
   STRING(REGEX REPLACE "-pedantic" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ENDIF()

# libsndfile
FIND_PACKAGE ( Sndfile REQUIRED )
IF (SNDFILE_FOUND)
	MESSAGE("libsndfile found.")
	MESSAGE("Using libsndfile library: ${SNDFILE_LIBRARY}")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SNDFILE")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_SNDFILE")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR})
ELSE (SNDFILE_FOUND)
	MESSAGE(FATAL_ERROR "libsndfile required but not found.")
ENDIF (SNDFILE_FOUND)

# OpenCV
IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
	FIND_PACKAGE ( OpenCV COMPONENTS CV CXCORE CVAUX IMGPROC CALIB3D VIDEO FEATURES2D OBJDETECT CONTRIB LEGACY )
ELSE()
	FIND_PACKAGE ( OpenCV COMPONENTS CV CXCORE CVAUX IMGPROC CALIB3D VIDEO FEATURES2D OBJDETECT CONTRIB LEGACY HIGHGUI )
ENDIF()
IF ( OpenCV_FOUND )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCV")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENCV")

	# TODO: check for FFmpeg plugin #CvCapture_FFMPEG

	INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
	MESSAGE( "Using OpenCV libraries: ${OpenCV_LIBRARIES}")
ELSE ( OpenCV_FOUND)
	MESSAGE(FATAL_ERROR "OpenCV not found.")
ENDIF ( OpenCV_FOUND )

# OpenGL
IF ( USE_OPENGL )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
	ELSE()
		FIND_PACKAGE( OpenGL )
	ENDIF()
	IF ( OPENGL_FOUND )
		MESSAGE ( "Found OpenGL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} )
		ENDIF()
	ELSE ( OPENGL_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL not found.")
	ENDIF ( OPENGL_FOUND )
ENDIF ( USE_OPENGL )

#OSG
#IF ( USE_OSG )
	FIND_PACKAGE ( OSG REQUIRED )
	IF ( OSG_FOUND )
		MESSAGE("-- Found OSG library in: ${OSG_LIBRARY}")
		IF ( WIN32 ) # OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM
			ADD_DEFINITIONS(-DOSG_LIBRARY_STATIC)
			FIND_PACKAGE (PkgConfig)
			IF ( PKG_CONFIG_FOUND )
				MESSAGE( "PkgConfig found: ${PKG_CONFIG_EXECUTABLE}" )
				PKG_CHECK_MODULES (OSGPLUGINS REQUIRED openscenegraph-osgPlugins)
				IF (OSGPLUGINS_FOUND)
					MESSAGE( "osgPlugins ldflags found through pkg-config: ${OSGPLUGINS_LDFLAGS}" )
				ELSE (OSGPLUGINS_FOUND)
					MESSAGE( FATAL_ERROR "osgPlugins ldflags not found through pkg-config." )
				ENDIF (OSGPLUGINS_FOUND)
			ELSE ( PKG_CONFIG_FOUND )
				MESSAGE( FATAL_ERROR "pkg-config not found." )
			ENDIF ( PKG_CONFIG_FOUND )
		ENDIF ( WIN32 )# OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM )

		# FFmpeg plugin check
		STRING(REPLACE "include" "lib" OSG_LIBRARY_DIR ${OSG_INCLUDE_DIR}) #CF check NOT MINGW Windows systems, might be under "bin" instead of "lib"
		FILE(GLOB OSG_FFMPEG_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_ffmpeg*)
		IF (OSG_FFMPEG_PLUGIN)
			MESSAGE("-- Found FFmpeg plugin for OSG: ${OSG_FFMPEG_PLUGIN}")
		ELSE()
			MESSAGE(FATAL_ERROR "Couldn't find FFmpeg plugin for OSG. OSG 2.8.3 or above is needed")
		ENDIF()

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSG")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSG")
		INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
		MESSAGE("Using OSG libraries: ${OSG_LIBRARY} ${OSGDB_LIBRARY} ${OSGGA_LIBRARY} ${OSGVIEWER_LIBRARY} ${OSGTEXT_LIBRARY}")
	ELSE ( OSG_FOUND )
		MESSAGE(FATAL_ERROR "OSG requested but not found")
	ENDIF ( OSG_FOUND )
#ENDIF ( USE_OSG )

# Qt
IF ( USE_QT4 )
	FIND_PACKAGE ( Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)
	IF (QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE( "Qt4 found in ${QT_LIBRARY_DIR}" )
		IF ( MINGW )
			ADD_DEFINITIONS(-DQT_STATIC)
		ELSE ( MINGW )
			ADD_DEFINITIONS(-DQT_DLL)
			ADD_DEFINITIONS(-DQT_THREAD_SUPPORT)
		ENDIF ( MINGW )
		INCLUDE (${QT_USE_FILE})
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
		SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
 		SET(TARGET_EXTERNAL_LIBRARIES ${QT_QTCORE_LIBRARY_RELEASE} ${QT_QTGUI_LIBRARY_RELEASE} ${QT_QTOPENGL_LIBRARY_RELEASE} )
 		INCLUDE_DIRECTORIES( ${QT4_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR} ${QT_QTOPENGL_INCLUDE_DIR})
	ELSE(QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE(FATAL_ERROR "Qt 4 & QtOpenGL not found.")
	ENDIF(QT4_FOUND AND QT_QTOPENGL_FOUND)
ENDIF ( USE_QT4 )

# Cocoa
IF ( USE_COCOA )
	IF ( APPLE )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_COCOA")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_COCOA")
	ELSE ( APPLE )
		MESSAGE( "Cocoa works only on Apple systems. Cocoa apps won't be built." )
	ENDIF ( APPLE )
ENDIF ( USE_COCOA )

# OpenAL
IF ( USE_OPENAL )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ENDIF()
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ENDIF()	
	ELSE()
		FIND_PACKAGE( OpenAL )
	ENDIF()
	IF ( OPENAL_FOUND )
		MESSAGE ( "Found OpenAL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENAL")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENAL")
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR})
		ENDIF()
	ELSE ( OPENAL_FOUND)
		MESSAGE(FATAL_ERROR "OpenAL requested but not found.")
	ENDIF ( OPENAL_FOUND )

	# ALUT
	#IF ( APPLE_LEOPARD )
	#	MESSAGE("ALUT not yet required.")
		SUBDIRS(audioengine)
		INCLUDE_DIRECTORIES(audioengine)
	#ELSE ()
	#	IF ( USE_ALUT )
	#		IF ( OPENAL_FOUND )
	#			FIND_PACKAGE( ALUT )
	#			IF ( ALUT_FOUND )
	#				MESSAGE ( "Found ALUT: ${ALUT_LIBRARY}" )
	#				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ALUT")
	#				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_ALUT")
	#				INCLUDE_DIRECTORIES( ${ALUT_INCLUDE_DIR})
	#				SUBDIRS(audioengine)
	#				INCLUDE_DIRECTORIES(audioengine)
	#			ELSE ( ALUT_FOUND)
	#				MESSAGE(FATAL_ERROR "ALUT requested but not found.")
	#			ENDIF ( ALUT_FOUND )
	#		ELSE (OPENAL_FOUND)
	#			MESSAGE(FATAL_ERROR "ALUT requires OpenAL that is not found.")
	#		ENDIF ( OPENAL_FOUND )
	#	ENDIF ( USE_ALUT )
	#ENDIF ()
ENDIF ( USE_OPENAL )

# Armadillo
FIND_PACKAGE ( Armadillo )
IF (ARMADILLO_FOUND)
	FILE(GLOB HAVE_RANDU ${ARMADILLO_INCLUDE_DIR}/armadillo_bits/fn_randu.hpp)
	IF (NOT HAVE_RANDU)
		MESSAGE(FATAL_ERROR "Armadillo version >= 0.9.50 is required for using randu().")
	ENDIF()
	MESSAGE("Armadillo found in ${ARMADILLO_INCLUDE_DIR}.")
	IF ( WIN32 )
		INCLUDE(FindPackageHandleStandardArgs)
		FIND_LIBRARY(BLAS_LIBRARY NAMES blas )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(BLAS REQUIRED BLAS_LIBRARY)
		IF (NOT BLAS_FOUND)
			MESSAGE(FATAL_ERROR "BLAS library not found, required for Armadillo.")
		ENDIF () # link with ${BLAS_LIBRARY}
		FIND_LIBRARY(LAPACK_LIBRARY NAMES lapack )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(LAPACK REQUIRED LAPACK_LIBRARY)
		IF (NOT LAPACK_FOUND)
			MESSAGE(FATAL_ERROR "LAPACK library not found, required for Armadillo.")
		ENDIF () # link with ${LAPACK_LIBRARY}
	ENDIF ( WIN32 )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ARMADILLO")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_ARMADILLO")
	INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
	SUBDIRS(armadillo)
ELSE (ARMADILLO_FOUND)
	MESSAGE(FATAL_ERROR "Armadillo not found.")
ENDIF (ARMADILLO_FOUND)

# libsamplerate
FIND_PACKAGE ( Samplerate )
IF (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate found.")
ELSE (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate not found.")
ENDIF (SAMPLERATE_FOUND)

IF ( ARMADILLO_FOUND AND SAMPLERATE_FOUND AND USE_AUDIOFEAT )
	MESSAGE("Building audio features plugin/lib/cli.")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOFEAT")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOFEAT")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR} ${SAMPLERATE_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(audio)
	SUBDIRS(audio)
ELSE ( )
	MESSAGE("Not building audio features plugin/lib/cli.")
	SET(USE_AUDIOFEAT OFF)
ENDIF ( )

# SDIF
IF ( USE_SDIF )
	FIND_PACKAGE ( SDIF )
	IF (SDIF_FOUND)
		MESSAGE("SDIF found.")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SDIF")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_SDIF")
		INCLUDE_DIRECTORIES(${SDIF_INCLUDE_DIR})
	ELSE (SDIF_FOUND)
		MESSAGE("SDIF not found.")
		SET(USE_SDIF OFF)
	ENDIF (SDIF_FOUND)
ENDIF ()

# MATIO (added by ccl)
#FIND_PACKAGE ( MATIO )
#IF (MATIO_FOUND)
#    MESSAGE("libmatio found.")
#    INCLUDE_DIRECTORIES(${MATIO_INCLUDE_DIR})
#ELSE (MATIO_FOUND)
#    MESSAGE("libmatio not found.")
#ENDIF (MATIO_FOUND) 

IF (APPLE)
	IF (NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
		IF(EXISTS /System/Library/PrivateFrameworks/MultitouchSupport.framework)
			MESSAGE("Found Multitouch Support Framework.")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_APPLE_MULTITOUCH")
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_APPLE_MULTITOUCH")
			SET(USE_APPLE_MULTITOUCH ON)
		ENDIF ()
	ENDIF()
ENDIF ()

# OpenMP
IF(NOT APPLE_SNOW_LEOPARD)
	include(CMakeForceCompiler)
	#CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
	#CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)
	FIND_PACKAGE(OpenMP) 
	IF (OPENMP_FOUND) 
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -D_USE_OPENMP") 
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -D_USE_OPENMP")
		SET(USE_OPENMP ON) 
	ELSE (OPENMP_FOUND)
		SET(USE_OPENMP OFF)
	ENDIF (OPENMP_FOUND)
ENDIF()



# StarPU http://runtime.bordeaux.inria.fr/StarPU/
FIND_PACKAGE ( StarPU )
IF (STARPU_FOUND)
	MESSAGE("StarPU found in ${STARPU_INCLUDE_DIR}.")
	#INCLUDE (CheckIncludeFiles)
	CHECK_SYMBOL_EXISTS (STARPU_USE_CPU "starpu_config.h" STARPU_USE_CPU)
	IF (STARPU_USE_CPU)
		MESSAGE("StarPU compiled with CPU support.")
	ELSE()
		MESSAGE("StarPU not compiled with CPU support.")
	ENDIF()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_STARPU")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_STARPU")
	INCLUDE_DIRECTORIES(${STARPU_INCLUDE_DIR})
	#SUBDIRS()
ELSE (STARPU_FOUND)
	MESSAGE("StarPU not found, support disabled.")
ENDIF (STARPU_FOUND)