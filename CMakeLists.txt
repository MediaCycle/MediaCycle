PROJECT(MediaCycle)

SUBDIRS(core cli gui plugins test armadillo fftooura tinyxml)

INCLUDE_DIRECTORIES(. core armadillo)
INCLUDE_DIRECTORIES( "/usr/local/include/TiCore" )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/usr/local/lib" )

# add some find scripts
SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/CMakeModules")
MESSAGE ( "modules in " ${CMAKE_MODULE_PATH} )

cmake_minimum_required(VERSION 2.6)
IF(COMMAND cmake_policy)
      cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)

#options
OPTION(USE_DEBUG "Use debug" ON)

OPTION(USE_BOOST_SERIALIZATION "Use Boost C++ Serialization" ON)
OPTION(USE_OPENCV "Use OpenCV" ON)
OPTION(USE_OPENGL "Use OpenGL" ON)
OPTION(USE_OSG "Use OpenSceneGraph" OFF)
OPTION(USE_PSYCLONE "Use OpenSceneGraph" OFF)

IF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
ENDIF ( WIN32 )

IF ( APPLE )
        INCLUDE_DIRECTORIES( "/opt/local/include" )
        INCLUDE_DIRECTORIES( "/opt/local" )
        LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local/lib" )
        LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local" )
ENDIF ( APPLE )

IF ( USE_DEBUG )
	MESSAGE( "Configured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1")
        SET(CMAKE_BUILD_TYPE "Debug")
ELSE ( USE_DEBUG )
	MESSAGE( "Configured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=0 -O0")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=0 -O3")
        SET(CMAKE_BUILD_TYPE "Release")
ENDIF ( USE_DEBUG )

# OpenCV
IF(USE_OPENCV)
	FIND_PACKAGE ( OPENCV )
	IF ( OPENCV_FOUND )
		MESSAGE( "Found OpenCV : ${OPENCV_LIBRARIES} ${OPENCV_INCLUDE_DIR}" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCV")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENCV")
		INCLUDE_DIRECTORIES(${OPENCV_INCLUDE_DIR})
	ENDIF ( OPENCV_FOUND )
ENDIF(USE_OPENCV)

# OpenGL
IF ( USE_OPENGL )
	FIND_PACKAGE( OpenGL )
	FIND_PACKAGE( GLUT )

	IF ( OPENGL_FOUND )
		MESSAGE ( "Found OpenGL" )
	ENDIF ( OPENGL_FOUND )

	IF ( GLUT_FOUND )
		MESSAGE ( "Found GLUT" )
	ENDIF ( GLUT_FOUND )

	IF ( OPENGL_FOUND AND GLUT_FOUND)
		MESSAGE( "Found OpenGL & GLut")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
		INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR} )
	ELSE ( OPENGL_FOUND AND GLUT_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL/Glut requested but not found.")
	ENDIF ( OPENGL_FOUND AND GLUT_FOUND )
ENDIF ( USE_OPENGL )

#OSG
IF ( USE_OSG )
	FIND_PACKAGE ( OSG )
	IF ( OSG_FOUND )
		MESSAGE("Found OSG : ${OSG_LIBRARY}")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSG")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSG")
                INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
        ELSE ( OSG_FOUND )
                MESSAGE("OSG not found")
	ENDIF ( OSG_FOUND )
ENDIF ( USE_OSG )

#Boost
IF ( USE_BOOST_SERIALIZATION )
	FIND_PACKAGE ( Boost COMPONENTS serialization )
	IF ( Boost_FOUND )
		MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_BOOST_SERIALIZATION")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST_SERIALIZATION")
		INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
                LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${Boost_LIBRARY_DIRS} )
	ELSE ( Bost_FOUND )
		MESSAGE(FATAL_ERROR "Boost not found.")
	ENDIF ( Boost_FOUND )
ENDIF ( USE_BOOST_SERIALIZATION )
