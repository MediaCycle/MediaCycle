PROJECT(MediaCycle)

SUBDIRS(audioengine core cli gui armadillo fftooura gnuplot_i)

INCLUDE_DIRECTORIES(. audioengine core gnuplot_i)
INCLUDE_DIRECTORIES( "/usr/local/include/TiCore" )
LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/usr/local/lib" )

# add some find scripts
# SET(CMAKE_USE_RELATIVE_PATHS YES)
SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/CMakeModules")
MESSAGE ( "modules in " ${CMAKE_MODULE_PATH} )

cmake_minimum_required(VERSION 2.6)
IF(COMMAND cmake_policy)
      cmake_policy(SET CMP0003 NEW)
ENDIF(COMMAND cmake_policy)
#config
SET(PLUGIN_PREFIX "mc_")
# SET(PLUGIN_SUFFIX ".mcp") #change OS-dependent extension (so, dll, dynlib) to a fixed one (.mcp)

#options
OPTION(USE_DEBUG "Use debug" ON)
OPTION(USE_BOOST "Use Boost C++" ON)
OPTION(USE_OPENCV "Use OpenCV" ON)
OPTION(USE_OPENGL "Use OpenGL" ON)
OPTION(USE_OPENAL "Use OpenAL" ON)
OPTION(USE_ALUT "Use ALUT" ON)
OPTION(USE_OSG "Use OpenSceneGraph" ON)
OPTION(USE_PSYCLONE "Use Psyclone" OFF)
OPTION(USE_OSC "Use OpenSoundControl" ON)
OPTION(USE_QT4 "Use Qt4 Toolkit" ON)
OPTION(USE_COCOA "Use Cocoa" ON)
OPTION(BUILD_APPS "Build apps" ON)
OPTION(BUILD_TESTS "Build tests" OFF)
OPTION(BUILD_PLUGINS "Build plugins" ON)

IF ( APPLE )
	OPTION(USE_ALUT "Use ALUT" OFF)
ENDIF ( APPLE )

IF ( UNIX )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF ( UNIX )

IF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
ENDIF ( WIN32 )

IF ( APPLE )
	INCLUDE_DIRECTORIES( "/opt/local/include" )
	INCLUDE_DIRECTORIES( "/opt/local" )
	LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local/lib" )
	LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local" )
ENDIF ( APPLE )

IF ( BUILD_APPS )
	INCLUDE_DIRECTORIES(apps)
	SUBDIRS(apps)
ENDIF ( BUILD_APPS )

IF ( BUILD_TESTS )
	SUBDIRS(test tinyxml)
ENDIF ( BUILD_TESTS )

IF ( BUILD_PLUGINS )
	SUBDIRS(plugins)
ENDIF ( BUILD_PLUGINS )

IF ( USE_DEBUG )
	MESSAGE( "Configured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_BUILD_TYPE "Debug")
ELSE ( USE_DEBUG )
	MESSAGE( "Configured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O0")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF ( USE_DEBUG )

# OpenCV
IF(USE_OPENCV)
	FIND_PACKAGE ( OPENCV )
	IF ( OPENCV_FOUND )
		MESSAGE( "Found OpenCV : ${OPENCV_LIBRARIES} ${OPENCV_INCLUDE_DIR}" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCV")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENCV")
		INCLUDE_DIRECTORIES(${OPENCV_INCLUDE_DIR})
	ENDIF ( OPENCV_FOUND )
ENDIF(USE_OPENCV)

# OpenGL
IF ( USE_OPENGL )
	FIND_PACKAGE( OpenGL )
	FIND_PACKAGE( GLUT )

	IF ( OPENGL_FOUND )
		MESSAGE ( "Found OpenGL" )
	ENDIF ( OPENGL_FOUND )

	IF ( GLUT_FOUND )
		MESSAGE ( "Found GLUT" )
	ENDIF ( GLUT_FOUND )

	IF ( OPENGL_FOUND AND GLUT_FOUND)
		MESSAGE( "Found OpenGL & GLut")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
		INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR} )
	ELSE ( OPENGL_FOUND AND GLUT_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL/Glut requested but not found.")
	ENDIF ( OPENGL_FOUND AND GLUT_FOUND )
ENDIF ( USE_OPENGL )

# OpenAL
IF ( USE_OPENAL )
	FIND_PACKAGE( OpenAL )
	IF ( OPENAL_FOUND )
		MESSAGE ( "Found OpenAL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENAL")
		INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR})
	ELSE ( OPENAL_FOUND)
		MESSAGE(FATAL_ERROR "OpenAL requested but not found.")
	ENDIF ( OPENAL_FOUND )
ENDIF ( USE_OPENAL )

# ALUT
IF ( APPLE )
	MESSAGE("ALUT not yet required.")
ELSE ( APPLE )
	IF ( USE_ALUT )
		IF ( USE_OPENAL )
			IF ( OPENAL_FOUND )
				FIND_PACKAGE( ALUT )
				IF ( ALUT_FOUND )
					MESSAGE ( "Found ALUT" )
					SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ALUT")
					INCLUDE_DIRECTORIES( ${ALUT_INCLUDE_DIR})
				ELSE ( ALUT_FOUND)
					MESSAGE(FATAL_ERROR "ALUT requested but not found.")
				ENDIF ( ALUT_FOUND )
			ELSE (OPENAL_FOUND)
				MESSAGE(FATAL_ERROR "ALUT requires OpenAL that is not found.")
			ENDIF ( OPENAL_FOUND )
		ELSE ( USE_OPENAL)
			MESSAGE(FATAL_ERROR "ALUT requires OpenAL that is not being used.")
		ENDIF ( USE_OPENAL )
	ENDIF ( USE_ALUT )
ENDIF ( APPLE )

#OSG
IF ( USE_OSG )
	FIND_PACKAGE ( OSG )
	IF ( OSG_FOUND )
		MESSAGE("Found OSG : ${OSG_LIBRARY}")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSG")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSG")
		INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
	ELSE ( OSG_FOUND )
		MESSAGE(FATAL_ERROR "OSG requested but not found")
	ENDIF ( OSG_FOUND )
ENDIF ( USE_OSG )

#Boost
IF ( USE_BOOST )
	#boost (serialization + system + filesystem + graph)
	FIND_PACKAGE ( Boost COMPONENTS serialization system filesystem graph)
	IF ( Boost_FOUND )
		MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_BOOST")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST")
		INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${Boost_LIBRARY_DIRS} )
	ELSE ( Boost_FOUND )
		MESSAGE(FATAL_ERROR "Boost requested but not found.")
	ENDIF ( Boost_FOUND )
ENDIF ( USE_BOOST )

IF ( USE_COCOA )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_COCOA")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_COCOA")
ENDIF ( USE_COCOA )

# Qt
IF ( USE_QT4 )
	FIND_PACKAGE ( Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)
	IF (QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE( "Qt4 found in ${QT_LIBRARY_DIR}" )
		INCLUDE (${QT_USE_FILE})
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
		SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
 		SET(TARGET_EXTERNAL_LIBRARIES ${QT_QTCORE_LIBRARY_RELEASE} ${QT_QTGUI_LIBRARY_RELEASE} ${QT_QTOPENGL_LIBRARY_RELEASE} )
 		LINK_LIBRARIES( ${QT4_LIBRARY} ${QT_QTCORE_LIBRARY} ${QT_QTGUI_LIBRARY} ${QT_QTOPENGL_LIBRARY} )
 		INCLUDE_DIRECTORIES( ${QT4_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR} ${QT_QTOPENGL_INCLUDE_DIR})
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${QT4_LIBRARY_DIR} ${QT_QTCORE_LIBRARY_DIR} ${QT_QTGUI_LIBRARY_DIR} ${QT_QTOPENGL_LIBRARY_DIR})
	ELSE(QT4_FOUND AND QT_QTOPENGL_FOUND)
#  		SET(TARGET_EXTERNAL_LIBRARIES ${QT_LIBRARIES} )
		MESSAGE(FATAL_ERROR "Qt 4 & QtOpenGL not found.")
	ENDIF(QT4_FOUND AND QT_QTOPENGL_FOUND)
# 	INCLUDE_DIRECTORIES(${QT_INCLUDE_DIR} )
ENDIF ( USE_QT4 )

# OSC
IF ( USE_OSC )
	INCLUDE_DIRECTORIES(io)
	SUBDIRS(io)
ENDIF ( USE_OSC )

# armadillo
FIND_PACKAGE ( Armadillo )
IF (ARMADILLO_FOUND)
	MESSAGE("Armadillo found.")
	INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
ELSE (ARMADILLO_FOUND)
	MESSAGE("Armadillo not found.")
ENDIF (ARMADILLO_FOUND)

# libsndfile
FIND_PACKAGE ( Sndfile )
IF (SNDFILE_FOUND)
	MESSAGE("libsndfile found.")
ELSE (SNDFILE_FOUND)
	MESSAGE("libsndfile not found.")
ENDIF (SNDFILE_FOUND)

# libsamplerate
FIND_PACKAGE ( Samplerate )
IF (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate found.")
ELSE (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate not found.")
ENDIF (SAMPLERATE_FOUND)

# libsdif
FIND_PACKAGE ( SDIF )
IF (SDIF_FOUND)
	MESSAGE("SDIF found.")
ELSE (SDIF_FOUND)
	MESSAGE("SDIF not found.")
ENDIF (SDIF_FOUND)

IF ( ARMADILLO_FOUND AND SNDFILE_FOUND AND SAMPLERATE_FOUND AND SDIF_FOUND )
	MESSAGE("Building audio features plugin/lib/cli.")
	OPTION(USE_AUDIOFEAT "Using audio features" ON)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOFEAT")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOFEAT")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR} ${SAMPLERATE_INCLUDE_DIR} ${SDIF_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(audio)
	SUBDIRS(audio)
ELSE ( ARMADILLO_FOUND AND SNDFILE_FOUND AND SAMPLERATE_FOUND )
	MESSAGE("Not building audio features plugin/lib/cli.")
	OPTION(USE_AUDIOFEAT "Using audio features" OFF)
ENDIF ( ARMADILLO_FOUND AND SNDFILE_FOUND AND SAMPLERATE_FOUND AND SDIF_FOUND )