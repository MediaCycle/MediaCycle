PROJECT(MediaCycle)

# add some find scripts
# SET(CMAKE_USE_RELATIVE_PATHS YES)
SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/CMakeModules")

INCLUDE(${MediaCycle_SOURCE_DIR}/CMakeModules/FindLinkedDirectories.cmake)

cmake_minimum_required(VERSION 2.6.2)
#MESSAGE(${CMAKE_VERSION})

IF(COMMAND cmake_policy)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.0")
		#AM: don't know which is the best, but must be < CMP0008 for cmake 2.6.0 and < CMP0012 for cmake 2.6.4
		cmake_policy(SET CMP0003 NEW) 
	ELSE()
		cmake_policy(SET CMP0014 NEW)
	ENDIF ( )
ENDIF(COMMAND cmake_policy)

# Checking Apple OSX versions and generator
IF (APPLE)
	IF(${CMAKE_SYSTEM_VERSION} MATCHES "10.")
		SET(APPLE_SNOW_LEOPARD ON)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_SNOW_LEOPARD")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_SNOW_LEOPARD")
	ELSEIF(${CMAKE_SYSTEM_VERSION} MATCHES "9.")
		SET(APPLE_LEOPARD ON)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_LEOPARD")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_LEOPARD")
	ENDIF()
	include(CMakeForceCompiler)
	CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
	CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)
	IF("${CMAKE_GENERATOR}" MATCHES "Xcode")
		MESSAGE("Using XCode")
		set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "4.2")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DXCODE")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DXCODE")
	ENDIF()
ENDIF()

# OPTIONS
OPTION(SUPPORT_AUDIO "Support audio media" ON)
OPTION(SUPPORT_IMAGE "Support image media" ON)
OPTION(SUPPORT_VIDEO "Support video media" ON)
OPTION(SUPPORT_3DMODEL "Support 3D models media" ON)
#OPTION(SUPPORT_TEXT "Support text media" ON)
OPTION(APPLE_IOS_DEV "Cross-compile for iPhone OS Device" OFF)
OPTION(APPLE_IOS_SIM "Cross-compile for iPhone OS Simulator" OFF)
OPTION(APPLE_IOS_XCODE "Generate an XCode project for cross-compiling for the iPhone OS" OFF)
OPTION(USE_DEBUG "Use Debug" ON)
OPTION(USE_OPENGL "Use OpenGL" ON)
#OPTION(USE_OSG "Use OSG" ON) # Currently required in the core for 3D models
SET(USE_OSG ON)
OPTION(USE_OPENAL "Use OpenAL" ON)
OPTION(USE_PORTAUDIO "Use PortAudio" OFF)
IF ( NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
	IF(APPLE)
		OPTION(USE_COCOA "Use Cocoa" ON)
	ENDIF()
	OPTION(USE_QT4 "Use Qt4 Toolkit" ON)
	OPTION(USE_OSC "Use OpenSoundControl" ON)
	OPTION(USE_AUDIOFEAT "Using audio features" ON)
	OPTION(USE_LAUGHFEAT "Using laugh features" ON)
	OPTION(USE_PSYCLONE "Use Psyclone" OFF)
	OPTION(BUILD_TESTS "Build tests" ON)
	OPTION(BUILD_PLUGINS "Build plugins" ON)
	OPTION(USE_AUDIOGARDEN "Use audiogarden" ON)
	OPTION(USE_VAMP "Use VAMP plugin SDK" ON)
ENDIF()	
OPTION(BUILD_APPS "Build apps" ON)
OPTION(BUILD_CLIS "Build command-line interface applications" ON)	
OPTION(USE_SDIF "Use SDIF" OFF)

######################
#     MEDIA TYPES    #
######################
MESSAGE("\nMedia types:")
IF(SUPPORT_AUDIO)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPORT_AUDIO")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPORT_AUDIO")
	MESSAGE("[X] AUDIO")
ELSE()
	SET(USE_AUDIOGARDEN OFF)
	SET(USE_AUDIOFEAT OFF)
	SET(USE_LAUGHFEAT OFF)
	SET(USE_VAMP OFF)
	MESSAGE("[ ] AUDIO")
ENDIF()
IF(SUPPORT_IMAGE)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPORT_IMAGE")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPORT_IMAGE")
	MESSAGE("[X] IMAGE")
ELSE()
	MESSAGE("[ ] IMAGE")
ENDIF()
IF(SUPPORT_VIDEO)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPORT_VIDEO")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPORT_VIDEO")
	MESSAGE("[X] VIDEO")
ELSE()
	MESSAGE("[ ] VIDEO")
ENDIF()
IF(SUPPORT_3DMODEL)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPORT_3DMODEL")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPORT_3DMODEL")
	MESSAGE("[X] 3D MODELS")
ELSE()
	MESSAGE("[ ] 3D MODELS")
ENDIF()
#IF(SUPPORT_TEXT)
#	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DSUPPORT_TEXT")
#	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DSUPPORT_TEXT")
#	MESSAGE("[X] TEXT")
#ELSE()
#	MESSAGE("[ ] TEXT")
#ENDIF()

IF(NOT SUPPORT_AUDIO AND NOT SUPPORT_IMAGE AND NOT SUPPORT_VIDEO AND NOT SUPPORT_3DMODEL)# AND NOT SUPPORT_TEXT)
	MESSAGE(FATAL_ERROR "You need to enable support for at least one media type!")
ENDIF()

######################
#     OS SPECIFIC    #
######################

# Apple issues
IF(APPLE AND NOT APPLE_IOS_XCODE AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE)
	SET(CMAKE_OSX_ARCHITECTURES "i386" CACHE STRING "Building for i386 (FFmpeg and QTKit support currently broken on Snow Leopard)" FORCE)
ENDIF()

# iOS DEVEL SPECIFIC
IF (APPLE_IOS_DEV OR APPLE_IOS_SIM)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.2")
		MESSAGE(FATAL_ERROR "Generating an Makefile project for iPhone OS Device/Simulator requires CMake version 2.8.2 and up.")
	ENDIF()
ENDIF()
IF (APPLE_IOS_XCODE AND NOT(${CMAKE_VERSION} STREQUAL "2.8.0"))
	MESSAGE(FATAL_ERROR "Generating an XCode project for iPhone OS works with CMake v. 2.8.0 only (2.8.2 produces corrupted project files).")
ENDIF()
IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
	SET(SUPPORT_IMAGE OFF) # Problem with OpenCV highgui
	SET(SUPPORT_VIDEO OFF) # Problem with OpenCV highgui

	IF( APPLE_IOS_DEV AND APPLE_IOS_SIM )
		MESSAGE(FATAL_ERROR "Cross-compile for iPhone OS Device OR Simulator at one time!")
	ENDIF()
	IF( NOT APPLE )
		MESSAGE(FATAL_ERROR "Cross-compiling for iPhone OS Device or Simulator works currently only on Apple OSX systems")
	ENDIF()

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_IOS")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_IOS")
ENDIF()

SET(PLUGIN_PREFIX "mc_")
# SET(PLUGIN_SUFFIX ".mcp") #change OS-dependent extension (so, dll, dylib) to a fixed one (.mcp)

# PACKAGING WITH CPack
IF ( UNIX OR APPLE )
	# To package do the following:
	# cmake ../.. -DBUILD_CLIS=OFF -DBUILD_TESTS=OFF -DBUILD_PLUGINS=OFF -DBUILD_SHARED_LIBS=ON -DCPACK_BINARY_DEB:BOOL=on
	# make package -j2
	#to build packages, use: make package
	SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "numediart")
	INCLUDE(InstallRequiredSystemLibraries)

	set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
	set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
	#set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "MediaCycle...")
	set(CPACK_PACKAGE_CONTACT "http://numediart.org/")
	set(CPACK_SOURCE_IGNORE_FILES
		"^${PROJECT_SOURCE_DIR}/Builds/"
		"^${PROJECT_SOURCE_DIR}/cli/"
		"^${PROJECT_SOURCE_DIR}/test/"
		"^${PROJECT_SOURCE_DIR}/apps/*-cli/"
	)
	#set(CPACK_PACKAGE_EXECUTABLES "multimediacycle-osg-qt" "MultiMediaCycle.icns") #should contain pairs of <executable> and <icon name>
	#set(CPACK_PACKAGE_ARCHITECTURE i386)
	IF (APPLE)
		#set(CPACK_BUNDLE_NAME "MC")
		set(CPACK_GENERATOR "DragNDrop")#set(CPACK_GENERATOR "PackageMaker;OSXX11")
	ELSE()
		set(CPACK_GENERATOR "TBZ2")
	ENDIF()
	SET(CPACK_PACKAGE_VENDOR "numediart")
	# For more see http://www.cmake.org/Wiki/CMake:Packaging_With_CPack
	#INCLUDE(CPack)
ENDIF ( UNIX OR APPLE )

IF ( WIN32 )
	SET(BUILD_TESTS OFF)
	SET(BUILD_PLUGINS OFF)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(BUILD_SHARED_LIBS OFF)
ENDIF ( WIN32 )

IF ( APPLE )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
			INCLUDE_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/include" )
			LINK_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/lib" )
		ENDIF()
		IF ( APPLE_IOS_XCODE )
			# Basic iPhone SDK detection (we need v. 4.2 currently, 4.1 unsupported)
			IF(EXISTS /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk)
				SET(iPhoneOS_SDK_FOUND TRUE)
			ENDIF()
			IF(EXISTS /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk)
				SET(iPhoneSimulator_SDK_FOUND TRUE)
			ENDIF()
			IF (iPhoneOS_SDK_FOUND AND iPhoneSimulator_SDK_FOUND)
				MESSAGE("Found iPhone SDK v.4.2")
				set(iPhoneOS_SDK_ROOT "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk")
				set(iPhoneSimulator_SDK_ROOT "/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk")
				set(iPhoneOS_DEPS_ROOT "/opt/ios/device/4.2")
				set(iPhoneSimulator_DEPS_ROOT "/opt/ios/simulator/4.2")

  				# Force gcc <= 4.2 on iPhone
  				include(CMakeForceCompiler)
  				CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
  				CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)

				SET(CMAKE_BUILD_TYPE Release)
				SET(CMAKE_FIND_ROOT_PATH "${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_DEPS_ROOT}" "${iPhoneSimulator_DEPS_ROOT}")
				SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
				SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
				SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				SET(OpenCV_ROOT_DIR "${iPhoneSimulator_DEPS_ROOT}")

				# Set build variables
				set(CMAKE_OSX_SYSROOT iphoneos4.2)
				set(CMAKE_OSX_DEPLOYMENT_TARGET "")
				set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_UNIVERSAL_IPHONE_OS)")
				set(CMAKE_EXE_LINKER_FLAGS "-framework Foundation -framework CoreGraphics -framework QuartzCore -framework UIKit")
				set(XCODE_ATTRIBUTE_SDKROOT iphoneos4.2)
				set(MACOSX_BUNDLE_GUI_IDENTIFIER "com.yourcompany.\${PRODUCT_NAME:rfc1034identifier}")
				add_definitions(-fno-regmove)
				remove_definitions(-msse)
			ELSE()
				MESSAGE(FATAL_ERROR "iPhone SDK v.4.2 required")
			ENDIF()
		ENDIF()
	ELSE()
		INCLUDE_DIRECTORIES( "/opt/local/include" )
		INCLUDE_DIRECTORIES( "/opt/local" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local/lib" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/usr/local/lib" )
		SET(OpenCV_ROOT_DIR "/opt/local")#CF
	ENDIF()
ENDIF ( APPLE )

IF ( USE_DEBUG )
	MESSAGE( "\nConfigured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_VERBOSE_MAKEFILE ON)
ELSE ( USE_DEBUG )
	MESSAGE( "\nConfigured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O0")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "Release")
	SET(CMAKE_VERBOSE_MAKEFILE ON)#CF
ENDIF ( USE_DEBUG )

######################
# EXTERNAL LIBRARIES #
######################

MESSAGE("\nEternal libraries:")
#Threads
FIND_PACKAGE ( Threads )

#Boost (serialization + system + filesystem + graph)
FIND_PACKAGE ( Boost REQUIRED COMPONENTS serialization system filesystem graph)
IF ( Boost_FOUND )
	MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
	IF ( WIN32 )
		SET( Boost_USE_STATIC_LIBS ON)
	ENDIF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_BOOST")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST")
	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	ADD_LINKED_DIRECTORY(${Boost_LIBRARY_DIRS})
	MESSAGE("Using Boost libraries: ${Boost_SERIALIZATION_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_GRAPH_LIBRARY}")
ELSE ( Boost_FOUND )
	MESSAGE(FATAL_ERROR "Boost requested but not found.")
ENDIF ( Boost_FOUND )

# FFmpeg, used as plugin for OSG and OpenCV
# TODO: if FFmpeg found, check for OSG and OpenCV plugins
# TODO: replace libsndfile/libsamplerate with FFmpeg for audio?
IF(SUPPORT_VIDEO)
FIND_PACKAGE( FFmpeg )
MESSAGE("Looking for FFmpeg libraries.")
IF(FFMPEG_LIBAVFORMAT_FOUND)
	MESSAGE("  avformat library found: ${FFMPEG_LIBAVFORMAT_LIBRARIES}")
ELSE()
	MESSAGE("  avformat library not found.")
ENDIF()
IF(FFMPEG_LIBAVDEVICE_FOUND)
	MESSAGE("  avdevice library found: ${FFMPEG_LIBAVDEVICE_LIBRARIES}")
ELSE()
	MESSAGE("  avdevice library not found.")
ENDIF()
IF(FFMPEG_LIBAVCODEC_FOUND)
	MESSAGE("  avcodec library found: ${FFMPEG_LIBAVCODEC_LIBRARIES}")
ELSE()
	MESSAGE("  avcodec library not found.")
ENDIF()
IF(FFMPEG_LIBAVUTIL_FOUND)
	MESSAGE("  avutil library found: ${FFMPEG_LIBAVUTIL_LIBRARIES}")
ELSE()
	MESSAGE("  avutil library not found.")
ENDIF()
IF(FFMPEG_LIBSWSCALE_FOUND)
	MESSAGE("  swscale library found: ${FFMPEG_LIBSWSCALE_LIBRARIES}")
ELSE()
	MESSAGE("  swscale library not found.")
ENDIF()
IF(FFMPEG_FOUND)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_FFMPEG")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_FFMPEG")
	INCLUDE_DIRECTORIES(${FFMPEG_INCLUDE_DIR})
	MESSAGE("Found all FFmpeg libraries in ${FFMPEG_LIBRARIES}.")
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVFORMAT_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVDEVICE_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVCODEC_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVUTIL_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBSWSCALE_LIBRARIES})
ELSE()
	MESSAGE(FATAL_ERROR "Some FFmpeg libraries are missing.")
ENDIF()
ENDIF(SUPPORT_VIDEO)

IF(CMAKE_COMPILER_IS_GNUCXX)
    # Remove -pedantic flag as it barfs on ffmpeg headers
   STRING(REGEX REPLACE "-pedantic" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
ENDIF()

# libsndfile
IF(SUPPORT_AUDIO)
FIND_PACKAGE ( Sndfile REQUIRED )
IF(SNDFILE_FOUND)
	MESSAGE("libsndfile found.")
	MESSAGE("Using libsndfile library: ${SNDFILE_LIBRARY}")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SNDFILE")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_SNDFILE")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${SNDFILE_LINK_DIRECTORIES})
ELSE(SNDFILE_FOUND)
	MESSAGE(FATAL_ERROR "libsndfile required but not found.")
ENDIF(SNDFILE_FOUND)
ENDIF(SUPPORT_AUDIO)

# OpenCV
IF(SUPPORT_VIDEO OR SUPPORT_IMAGE)
IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
	FIND_PACKAGE ( OpenCV COMPONENTS CV CXCORE CVAUX IMGPROC CALIB3D VIDEO FEATURES2D OBJDETECT CONTRIB LEGACY )
ELSE()
	FIND_PACKAGE ( OpenCV COMPONENTS CV CXCORE CVAUX IMGPROC CALIB3D VIDEO FEATURES2D OBJDETECT CONTRIB LEGACY HIGHGUI )
ENDIF()
IF ( OpenCV_FOUND )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENCV")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENCV")

	# TODO: check for FFmpeg plugin #CvCapture_FFMPEG

	INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
	MESSAGE( "Using OpenCV libraries: ${OpenCV_LIBRARIES}")
	ADD_LINKED_DIRECTORY(${OpenCV_LINK_DIRECTORIES})
ELSE ( OpenCV_FOUND)
	MESSAGE(FATAL_ERROR "OpenCV not found.")
ENDIF ( OpenCV_FOUND )
ENDIF(SUPPORT_VIDEO OR SUPPORT_IMAGE)

# OpenGL
IF ( USE_OPENGL )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
	ELSE()
		FIND_PACKAGE( OpenGL )
	ENDIF()
	IF ( OPENGL_FOUND )
		MESSAGE ( "Found OpenGL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} )
		ENDIF()
	ELSE ( OPENGL_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL not found.")
	ENDIF ( OPENGL_FOUND )
ENDIF ( USE_OPENGL )

#OSG
#IF ( USE_OSG )
IF(BUILD_APPS)
	FIND_PACKAGE(OpenSceneGraph 2.9.10 REQUIRED osg osgDB osgGA osgViewer osgText osgUtil OpenThreads) #FIND_PACKAGE ( OSG REQUIRED )
ELSE()
	IF(SUPPORT_3DMODEL)
		FIND_PACKAGE(OpenSceneGraph 2.9.10 REQUIRED osg osgDB osgGA OpenThreads) #FIND_PACKAGE ( OSG REQUIRED )
	ENDIF()
ENDIF()
	IF(OSG_FOUND)
		IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO)
			SET(OPENSCENEGRAPH_CORE_LIBRARIES ${OSG_LIBRARY};${OSGDB_LIBRARY};${OSGGA_LIBRARY};${OPENTHREADS_LIBRARY})
		ENDIF()
		IF(BUILD_APPS)
			SET(OPENSCENEGRAPH_LIBRARIES ${OSG_LIBRARY};${OPENSCENEGRAPH_LIBRARIES})
		ENDIF()
		IF ( WIN32 ) # OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM
			ADD_DEFINITIONS(-DOSG_LIBRARY_STATIC)
			FIND_PACKAGE (PkgConfig)
			IF ( PKG_CONFIG_FOUND )
				MESSAGE( "PkgConfig found: ${PKG_CONFIG_EXECUTABLE}" )
				PKG_CHECK_MODULES (OSGPLUGINS REQUIRED openscenegraph-osgPlugins)
				IF (OSGPLUGINS_FOUND)
					MESSAGE( "osgPlugins ldflags found through pkg-config: ${OSGPLUGINS_LDFLAGS}" )
				ELSE (OSGPLUGINS_FOUND)
					MESSAGE( FATAL_ERROR "osgPlugins ldflags not found through pkg-config." )
				ENDIF (OSGPLUGINS_FOUND)
			ELSE ( PKG_CONFIG_FOUND )
				MESSAGE( FATAL_ERROR "pkg-config not found." )
			ENDIF ( PKG_CONFIG_FOUND )
		ENDIF ( WIN32 )# OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM )

		# OSG plugins check (required at least for text display in apps)
		STRING(REPLACE "include" "lib" OSG_LIBRARY_DIR ${OSG_INCLUDE_DIR}) #CF check NOT MINGW Windows systems, might be under "bin" instead of "lib"
		#IF(SUPPORT_VIDEO)
		#	FILE(GLOB OSG_FFMPEG_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_ffmpeg*)
		#	IF (OSG_FFMPEG_PLUGIN)
		#		MESSAGE("-- Found FFmpeg plugin for OSG: ${OSG_FFMPEG_PLUGIN}")
		#	ELSE()
		#		MESSAGE(FATAL_ERROR "Couldn't find FFmpeg plugin for OSG. OSG 2.8.3 or above is needed")
		#	ENDIF()
		#ENDIF(SUPPORT_VIDEO)
		
		IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO)
			MESSAGE("-- Found core OpenSceneGraph libraries: ${OPENSCENEGRAPH_CORE_LIBRARIES}")
		ENDIF()
		IF(BUILD_APPS)
			ADD_LIB_LINKED_DIR(${OSGVIEWER_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGTEXT_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGUTIL_LIBRARY})
			MESSAGE("-- Found gui OpenSceneGraph libraries: ${OPENSCENEGRAPH_LIBRARIES}")
		ENDIF()
		
		FILE(GLOB OSG_PLUGINS ${OSG_LIBRARY_DIR}/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*)
		IF(APPLE)
			IF(EXISTS /opt/local/bin/port)#CF do a proper check
				SET(MACPORTS_FOUND ON)
			ENDIF()
			SET(DYLD_LIBRARY_PATH $ENV{DYLD_LIBRARY_PATH})
			FILE(GLOB CORRECT_OSG_PLUGINS_PATH
				~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/Network/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
			)
			FILE(GLOB INCORRECT_OSG_PLUGINS_PATH
				/opt/local/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/usr/local/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/usr/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
			)# OSG wont find these unless DYLD_LIBRARY_PATH is set, but it conflicts with MacPorts...
			STRING(REPLACE "/osgPlugins-*" "" INCORRECT_OSG_PLUGINS_PREFIX "${INCORRECT_OSG_PLUGINS_PATH}")
			IF(INCORRECT_OSG_PLUGINS_PATH AND NOT DYLD_LIBRARY_PATH AND NOT CORRECT_OSG_PLUGINS_PATH)
				IF(MACPORTS_FOUND)
					MESSAGE(FATAL_ERROR "Please first copy your most recent OSG plugins folder ${INCORRECT_OSG_PLUGINS_PATH}")
					MESSAGE(FATAL_ERROR "as ~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}")
					MESSAGE(FATAL_ERROR "or /Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}")
				ELSE()
					STRING(REPLACE ";" ":" INCORRECT_OSG_PLUGINS_PREFIX "${INCORRECT_OSG_PLUGINS_PREFIX}")
					MESSAGE(FATAL_ERROR "Please first add to your ~/.profile: export DYLD_LIBRARY_PATH=\$DYLD_LIBRARY_PATH:${INCORRECT_OSG_PLUGINS_PREFIX}")
					MESSAGE(FATAL_ERROR "and run: source ~/.profile")
				ENDIF()
			ENDIF()
			IF(CORRECT_OSG_PLUGINS_PATH AND NOT OSG_PLUGINS)
				FILE(GLOB OSG_PLUGINS
					~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
					/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
					/Network/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
				)
			ENDIF()
		ENDIF()
		SET(OSG_PLUGINS_3DMODEL "3dc;3ds;ac3d;bsp;dae;dw;dxf;fbx;geo;Inventor;ive;logo;lwo;lws;md2;obj;ogr;Openflight;osg;pfb;shp;stl;vrml;x")
		SET(OSG_PLUGINS_IMAGE "bmp;dds;gdal;gif;hdr;imageio;jp2;jpeg;Openflight;pic;png;pnm;qt;QTKit;rgb;tga;tiff")
		SET(OSG_PLUGINS_VIDEO "ffmpeg;qt;QTKit;xine")
		SET(OSG_PLUGINS_TEXT "freetype;txf")
		MESSAGE("OSG plugins:")
		set(N_OSG_PLUG_3DMODEL 0)
		set(N_OSG_PLUG_IMAGE 0)
		set(N_OSG_PLUG_VIDEO 0)
		set(N_OSG_PLUG_TEXT 0)
		foreach(OSG_PLUGIN ${OSG_PLUGINS})
			GET_FILENAME_COMPONENT(OSG_PLUGIN_NAME_WE ${OSG_PLUGIN} NAME_WE)
			STRING(REGEX REPLACE "osgdb_" "" OSG_PLUGIN_NAME_WE "${OSG_PLUGIN_NAME_WE}" )
			#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}")
			IF(SUPPORT_3DMODEL)
				foreach(OSG_PLUGIN_3DMODEL ${OSG_PLUGINS_3DMODEL})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_3DMODEL}" IS_3DMODEL) 
					IF(IS_3DMODEL)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: 3DMODEL")
						math(EXPR N_OSG_PLUG_3DMODEL ${N_OSG_PLUG_3DMODEL}+1)
						IF(N_OSG_PLUG_3DMODEL EQUAL 1)
							SET(OSGPLUGINS_3DMODEL "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_3DMODEL "${OSGPLUGINS_3DMODEL}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_3DMODEL)
			ENDIF()
			IF(SUPPORT_IMAGE)
				foreach(OSG_PLUGIN_IMAGE ${OSG_PLUGINS_IMAGE})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_IMAGE}" IS_IMAGE) 
					IF(IS_IMAGE)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: IMAGE")
						math(EXPR N_OSG_PLUG_IMAGE ${N_OSG_PLUG_IMAGE}+1)
						IF(N_OSG_PLUG_IMAGE EQUAL 1)
							SET(OSGPLUGINS_IMAGE "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_IMAGE "${OSGPLUGINS_IMAGE}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_IMAGE)
			ENDIF()
			IF(SUPPORT_VIDEO)
				foreach(OSG_PLUGIN_VIDEO ${OSG_PLUGINS_VIDEO})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_VIDEO}" IS_VIDEO) 
					IF(IS_VIDEO)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: VIDEO")
						math(EXPR N_OSG_PLUG_VIDEO ${N_OSG_PLUG_VIDEO}+1)
						IF(N_OSG_PLUG_VIDEO EQUAL 1)
							SET(OSGPLUGINS_VIDEO "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_VIDEO "${OSGPLUGINS_VIDEO}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_VIDEO)
			ENDIF()
			#IF(SUPPORT_TEXT)
				foreach(OSG_PLUGIN_TEXT ${OSG_PLUGINS_TEXT})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_TEXT}" IS_TEXT) 
					IF(IS_TEXT)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: TEXT")
						math(EXPR N_OSG_PLUG_TEXT ${N_OSG_PLUG_TEXT}+1)
						IF(N_OSG_PLUG_TEXT EQUAL 1)
							SET(OSGPLUGINS_TEXT "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_TEXT "${OSGPLUGINS_TEXT}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_TEXT)
			#ENDIF()
			#ADD_LINKED_DIRECTORY(${DIR})
		endforeach(OSG_PLUGIN)
		IF(SUPPORT_3DMODEL)
			MESSAGE("-- Found ${N_OSG_PLUG_3DMODEL} 3DMODEL OSG plugins: ${OSGPLUGINS_3DMODEL}")
		ENDIF()
		IF(SUPPORT_IMAGE)
			MESSAGE("-- Found ${N_OSG_PLUG_IMAGE} IMAGE OSG plugins: ${OSGPLUGINS_IMAGE}")
		ENDIF()
		IF(SUPPORT_VIDEO)
			MESSAGE("-- Found ${N_OSG_PLUG_VIDEO} VIDEO OSG plugins: ${OSGPLUGINS_VIDEO}")
		ENDIF()
		#IF(SUPPORT_TEXT)	
			MESSAGE("-- Found ${N_OSG_PLUG_TEXT} TEXT OSG plugins: ${OSGPLUGINS_TEXT}")
		#ENDIF()

		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSG")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSG")
		INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
		IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO OR BUILD_APPS)
			ADD_LIB_LINKED_DIR(${OSG_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGDB_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGGA_LIBRARY})
			ADD_LIB_LINKED_DIR(${OPENTHREADS_LIBRARY})
		ENDIF()
	ELSE()
		MESSAGE(FATAL_ERROR "OSG requested but not found")
	ENDIF()
#ENDIF(USE_OSG)

# Qt
IF ( USE_QT4 )
	FIND_PACKAGE ( Qt4 COMPONENTS QtCore QtGui QtOpenGL QtXml QtSvg Phonon REQUIRED)
	IF (QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE( "Qt4 found in ${QT_LIBRARY_DIRS}: ${QT_LIBRARIES}" )
		IF ( MINGW )
			ADD_DEFINITIONS(-DQT_STATIC)
		ELSE ( MINGW )
			ADD_DEFINITIONS(-DQT_DLL)
			ADD_DEFINITIONS(-DQT_THREAD_SUPPORT)
		ENDIF ( MINGW )
		SET(QT_USE_PHONON FALSE)# only TRUE for videoPlayer-iVisit-qt
		INCLUDE (${QT_USE_FILE})
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
		SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
		foreach(DIR ${QT_LIBRARY_DIRS})
			ADD_LINKED_DIRECTORY(${DIR})
		endforeach(DIR)
	ELSE(QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE(FATAL_ERROR "Qt 4 & QtOpenGL not found.")
	ENDIF(QT4_FOUND AND QT_QTOPENGL_FOUND)
ENDIF ( USE_QT4 )

# Cocoa
IF ( USE_COCOA )
	IF ( APPLE )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_COCOA")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_COCOA")
	ELSE ( APPLE )
		MESSAGE( "Cocoa works only on Apple systems. Cocoa apps won't be built." )
	ENDIF ( APPLE )
ENDIF ( USE_COCOA )

# OpenAL and Portaudio
IF(SUPPORT_AUDIO AND (USE_OPENAL OR USE_PORTAUDIO))
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ENDIF()
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ELSE()
			FIND_PACKAGE( OpenAL )
		ENDIF()
	ELSE()
		FIND_PACKAGE( OpenAL )
	ENDIF()
	FIND_PACKAGE ( Portaudio )
ENDIF()

# Since for now OpenAL support is more advanced than PortAudio support
IF(SUPPORT_AUDIO AND USE_OPENAL AND USE_PORTAUDIO)
	SET(USE_PORTAUDIO OFF)
ENDIF()

# Fallback situation 1
IF(SUPPORT_AUDIO AND NOT USE_OPENAL AND USE_PORTAUDIO AND OPENAL_FOUND AND NOT PORTAUDIO_FOUND)
	SET(USE_OPENAL ON)
	SET(USE_PORTAUDIO OFF)
ENDIF()

# Fallback situation 2
IF(SUPPORT_AUDIO AND USE_OPENAL AND NOT USE_PORTAUDIO AND NOT OPENAL_FOUND AND PORTAUDIO_FOUND)
	SET(USE_OPENAL OFF)
	SET(USE_PORTAUDIO ON)
ENDIF()

IF(SUPPORT_AUDIO AND USE_OPENAL)
	IF ( OPENAL_FOUND )
		MESSAGE ( "Found OpenAL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENAL")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENAL")
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR})
		ENDIF()
		ADD_LIB_LINKED_DIR(${OPENAL_LIBRARY})
	ELSE ()
		MESSAGE(FATAL_ERROR "OpenAL requested but not found (audioengine).")
	ENDIF ()
ENDIF ()
IF(SUPPORT_AUDIO AND USE_PORTAUDIO)
	IF (PORTAUDIO_FOUND)
		MESSAGE ("PortAudio found")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_PORTAUDIO")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_PORTAUDIO")
		INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIRS})
		ADD_LIB_LINKED_DIR(${PORTAUDIO_LIBRARIES})
	ELSE()
		MESSAGE(FATAL_ERROR "PortAudio requested but not found (audioengine).")
	ENDIF()
ENDIF()

# Armadillo
FIND_PACKAGE ( Armadillo REQUIRED )
IF (ARMADILLO_FOUND)
	FILE(GLOB HAVE_RANDU ${ARMADILLO_INCLUDE_DIR}/armadillo_bits/fn_randu.hpp)
	IF (NOT HAVE_RANDU)
		MESSAGE(FATAL_ERROR "Armadillo version >= 0.9.50 is required for using randu().")
	ENDIF()
	MESSAGE("Armadillo found in ${ARMADILLO_INCLUDE_DIR}.")
	IF ( WIN32 )
		INCLUDE(FindPackageHandleStandardArgs)
		FIND_LIBRARY(BLAS_LIBRARY NAMES blas )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(BLAS REQUIRED BLAS_LIBRARY)
		IF (NOT BLAS_FOUND)
			MESSAGE(FATAL_ERROR "BLAS library not found, required for Armadillo.")
		ENDIF () # link with ${BLAS_LIBRARY}
		FIND_LIBRARY(LAPACK_LIBRARY NAMES lapack )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(LAPACK REQUIRED LAPACK_LIBRARY)
		IF (NOT LAPACK_FOUND)
			MESSAGE(FATAL_ERROR "LAPACK library not found, required for Armadillo.")
		ENDIF () # link with ${LAPACK_LIBRARY}
	ENDIF ( WIN32 )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ARMADILLO")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_ARMADILLO")
	INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
	ADD_LIB_LINKED_DIR(${ARMADILLO_LIBRARY})
	#INCLUDE_DIRECTORIES(armadillo)
	#SUBDIRS(armadillo)
ELSE (ARMADILLO_FOUND)
	MESSAGE(FATAL_ERROR "Armadillo not found.")
ENDIF (ARMADILLO_FOUND)

# libsamplerate
IF(SUPPORT_AUDIO)
FIND_PACKAGE ( Samplerate )
IF (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate found.")
	ADD_LINKED_DIRECTORY(${SAMPLERATE_LINK_DIRECTORIES})
ELSE (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate not found.")
ENDIF (SAMPLERATE_FOUND)

IF ( ARMADILLO_FOUND AND SAMPLERATE_FOUND AND USE_AUDIOFEAT )
	MESSAGE("Building audio features plugin/lib/cli.")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOFEAT")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOFEAT")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR} ${SAMPLERATE_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(audio)
	SUBDIRS(audio)
ELSE ( )
	MESSAGE("Not building audio features plugin/lib/cli.")
	SET(USE_AUDIOFEAT OFF)
ENDIF ( )
ENDIF(SUPPORT_AUDIO)

# FFTW3
IF(SUPPORT_IMAGE OR SUPPORT_VIDEO)
FIND_PACKAGE ( FFTW3 )
IF (FFTW3_FOUND)
	MESSAGE("fftw3 found.")
	INCLUDE_DIRECTORIES(${FFTW3_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${FFTW3_LINK_DIRECTORIES})
ELSE (FFTW3_FOUND)
	MESSAGE("fftw3 not found.")
ENDIF (FFTW3_FOUND)
ENDIF(SUPPORT_IMAGE OR SUPPORT_VIDEO)

# SDIF
IF ( USE_SDIF )
	FIND_PACKAGE ( SDIF )
	IF (SDIF_FOUND)
		MESSAGE("SDIF found.")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_SDIF")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_SDIF")
		INCLUDE_DIRECTORIES(${SDIF_INCLUDE_DIR})
		ADD_LINKED_DIRECTORY(${SDIF_LINK_DIRECTORIES})
	ELSE (SDIF_FOUND)
		MESSAGE("SDIF not found.")
		SET(USE_SDIF OFF)
	ENDIF (SDIF_FOUND)
ENDIF ()

# MATIO (added by ccl)
#FIND_PACKAGE ( MATIO )
#IF (MATIO_FOUND)
#    MESSAGE("libmatio found.")
#    INCLUDE_DIRECTORIES(${MATIO_INCLUDE_DIR})
#	ADD_LIB_LINKED_DIR(${MATIO_LIBRARY})
#ELSE (MATIO_FOUND)
#    MESSAGE("libmatio not found.")
#ENDIF (MATIO_FOUND) 

IF (APPLE)
	IF (NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
		IF(EXISTS /System/Library/PrivateFrameworks/MultitouchSupport.framework)
			MESSAGE("Found Multitouch Support Framework.")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_APPLE_MULTITOUCH")
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_APPLE_MULTITOUCH")
			SET(USE_APPLE_MULTITOUCH ON)
		ENDIF ()
	ENDIF()
ENDIF ()

# OpenMP
IF(NOT APPLE_SNOW_LEOPARD)
	include(CMakeForceCompiler)
	#CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
	#CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)
	FIND_PACKAGE(OpenMP) 
	IF (OPENMP_FOUND) 
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -D_USE_OPENMP") 
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -D_USE_OPENMP")
		SET(USE_OPENMP ON) 
	ELSE (OPENMP_FOUND)
		SET(USE_OPENMP OFF)
	ENDIF (OPENMP_FOUND)
ENDIF()

#FIND_PACKAGE ( CUDA ) # requires CMake 2.6.3+ available from Ubuntu 9.10 Karmic Koala


# StarPU http://runtime.bordeaux.inria.fr/StarPU/
FIND_PACKAGE ( StarPU )
IF (STARPU_FOUND)
	MESSAGE("StarPU found in ${STARPU_INCLUDE_DIR}.")
	#INCLUDE (CheckIncludeFiles)
	CHECK_SYMBOL_EXISTS (STARPU_USE_CPU "starpu_config.h" STARPU_USE_CPU)
	IF (STARPU_USE_CPU)
		MESSAGE("StarPU compiled with CPU support.")
	ELSE()
		MESSAGE("StarPU not compiled with CPU support.")
	ENDIF()
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_STARPU")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_STARPU")
	INCLUDE_DIRECTORIES(${STARPU_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${STARPU_LINK_DIRECTORIES})
	#SUBDIRS()
ELSE (STARPU_FOUND)
	MESSAGE("StarPU not found, support disabled.")
ENDIF (STARPU_FOUND)

# Torch3
FIND_PACKAGE ( Torch3 )
IF (TORCH3_FOUND)
	MESSAGE("Torch3 found.")
	INCLUDE_DIRECTORIES(${TORCH3_INCLUDE_DIR} ${TORCH3_INCLUDE_DIR}/torch)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_TORCH3")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_TORCH3")
	ADD_LINKED_DIRECTORY(${TORCH3_LINK_DIRECTORIES})
ELSE (TORCH3_FOUND)
	MESSAGE("Torch3 not found.")
ENDIF (TORCH3_FOUND)

# NSIS for packaging WIN apps
IF(WIN32 OR MINGW)
	FIND_PACKAGE (NSIS)
	IF(NSIS_FOUND)
		MESSAGE("Found NSIS")
	ELSE()
		MESSAGE("Couldn't find NSIS")
	ENDIF()
ENDIF()

######################
# INTERNAL LIBRARIES #
######################
MESSAGE("\nInternal libraries:")

# OS-SPECIFIC SUBPROJECTS COMPILATION
IF ( WIN32 )
	INCLUDE_DIRECTORIES(. armadillo core)
	SUBDIRS(armadillo core tinyxml gui)
ELSE ( WIN32 )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		INCLUDE_DIRECTORIES(. armadillo core)
		SUBDIRS(armadillo core tinyxml gui fftooura lib)	
	ELSE()
		INCLUDE_DIRECTORIES(. armadillo core tinyxml gnuplot_i)
		SUBDIRS(armadillo core tinyxml cli gui fftooura gnuplot_i lib vamp-plugin-interface)		
	ENDIF()
ENDIF ( WIN32 )
IF ( UNIX )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	SET(OpenCV_ROOT_DIR "/usr")#CF
ENDIF ( UNIX )

# audioengine
IF(SUPPORT_AUDIO AND SNDFILE_FOUND AND (OPENAL_FOUND OR PORTAUDIO_FOUND))
	SUBDIRS(audioengine)
	INCLUDE_DIRECTORIES(audioengine)
ELSE()
	MESSAGE("[ ] audioengine")
ENDIF()

# OSC
IF ( USE_OSC )
	INCLUDE_DIRECTORIES(io)
	SUBDIRS(io)
ENDIF ( USE_OSC )

# audiogarden
IF (USE_AUDIOGARDEN)
	#SUBDIRS( ../../../../../audiogarden/ )#syncing with Cecile Picard's mercurial repository
	SUBDIRS(audiogarden)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOGARDEN")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOGARDEN")
ELSE()
	MESSAGE("[ ] audiogarden synthesis")
ENDIF()

######################
#       PLUGINS      #
######################

IF ( BUILD_PLUGINS )
	SUBDIRS(plugins)
ENDIF ( BUILD_PLUGINS )

IF(SUPPORT_3DMODEL)
	ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/3Dmodel")
ENDIF()
IF(SUPPORT_AUDIO)
	IF(USE_AUDIOFEAT)
		ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/audio")
	ENDIF()
	IF(USE_VAMP)
		ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/vamp")
	ENDIF()
ENDIF()
ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/eyesweb")
IF ( USE_PSYCLONE )
	ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/greta")
ENDIF()
IF(SUPPORT_IMAGE OR SUPPORT_VIDEO)
	ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/image")
ENDIF()
IF(SUPPORT_VIDEO)
	ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/video")
ENDIF()
ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/segmentation")
ADD_LINKED_DIRECTORY("${CMAKE_BINARY_DIR}/plugins/visualisation")

######################
#         APPS       #
######################

IF ( BUILD_APPS )
	INCLUDE_DIRECTORIES(apps)
	SUBDIRS(apps)
ENDIF ( BUILD_APPS )

######################
#        TESTS       #
######################

IF ( BUILD_TESTS )
	SUBDIRS(test)
ENDIF ( BUILD_TESTS )

##MESSAGE("LINKED_DIRECTORIES: ${LINKED_DIRECTORIES}")
##MESSAGE("CMAKE_SHARED_MODULE_SUFFIX: ${CMAKE_SHARED_MODULE_SUFFIX}")
