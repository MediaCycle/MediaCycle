IF(CMAKE_TOOLCHAIN_FILE AND CMAKE_INSTALL_PREFIX)
	SET(CMAKE_FIND_ROOT_PATH "${CMAKE_INSTALL_PREFIX}" CACHE PATH "Installation Directory" FORCE)
	MESSAGE("Using find root path: ${CMAKE_FIND_ROOT_PATH}")
ENDIF()

PROJECT(MediaCycle)

# add some find scripts
# SET(CMAKE_USE_RELATIVE_PATHS YES)
#SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/cmake")
list(APPEND CMAKE_MODULE_PATHS "${MediaCycle_SOURCE_DIR}/cmake")
FILE(GLOB CMAKEDIRLIST ${CMAKE_SOURCE_DIR}/cmake/*)
FOREACH(CMAKEDIR ${CMAKEDIRLIST})
    IF(IS_DIRECTORY ${CMAKEDIR})
	list(APPEND CMAKE_MODULE_PATHS "${CMAKEDIR}")
    ENDIF()
ENDFOREACH()
SET(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATHS}")

SET(MediaCycle_VERSION 0.2pre)
FIND_PROGRAM(HG NAMES hg)
IF(HG)
	EXEC_PROGRAM(${HG} ARGS "id -n ${CMAKE_SOURCE_DIR}" OUTPUT_VARIABLE MC_CURRENT_REVISION_OUT RESULT_VARIABLE MC_CURRENT_REVISION_RES)
	STRING(REGEX REPLACE "Not.*vboxsf" "" MC_CURRENT_REVISION_OUT ${MC_CURRENT_REVISION_OUT})
	IF(MC_CURRENT_REVISION_OUT AND MC_CURRENT_REVISION_RES EQUAL 0)
		SET(MediaCycle_VERSION 0.2rev${MC_CURRENT_REVISION_OUT})
	ENDIF()
ELSE()
	IF(NOT WIN32 AND NOT MINGW)
		MESSAGE(FATAL_ERROR "Couldn't find mercurial executable!")
	ENDIF()
ENDIF()

#MESSAGE("Current MC revision: ${MediaCycle_VERSION}")
SET(CMAKE_CXX_FLAGS "-DMC_VERSION=${MediaCycle_VERSION}")
SET(CMAKE_C_FLAGS "-DMC_VERSION=${MediaCycle_VERSION}")
INCLUDE(${MediaCycle_SOURCE_DIR}/cmake/FindLinkedDirectories.cmake)

cmake_minimum_required(VERSION 2.6.2)
#MESSAGE(${CMAKE_VERSION})
# CMake 2.8.6+ required for setting/getting properties between apps, 3rdparties, media libs, libs, plugins when using MC_STATIC_PLUGINS
IF("${CMAKE_MAJOR_VERSION}" GREATER "1" AND "${CMAKE_MINOR_VERSION}" GREATER "7" AND "${CMAKE_PATCH_VERSION}" GREATER "5")
    SET(CMAKE_CAN_APPEND_PROPERTIES ON)
ENDIF()

IF(${PROJECT_BINARY_DIR} EQUAL ${PROJECT_SOURCE_DIR})
MESSAGE(FATAL_ERROR "In-source building forbidden: create a 'Builds' subdirectory itself containing a directory describing your system and architecture.")
ENDIF()

IF(COMMAND cmake_policy)
	IF(${CMAKE_VERSION} STRLESS "2.8.13")
		#AM: don't know which is the best, but must be < CMP0008 for cmake 2.6.0 and < CMP0012 for cmake 2.6.4
		cmake_policy(SET CMP0003 NEW) 
	ELSE()
		cmake_policy(SET CMP0014 NEW)
		cmake_policy(SET CMP0017 NEW) # CF to remove the warning for the forked FindosgQt.cmake file
		IF(${CMAKE_VERSION} STRGREATER "3.0")    
			cmake_policy(SET CMP0042 NEW) # otherwise complaints that "MACOSX_RPATH is not specified for the following targets"
			cmake_policy(SET CMP0043 NEW) # otherwise complaints about "Ignore COMPILE_DEFINITIONS_<Config> properties"
			cmake_policy(SET CMP0046 NEW) # CF comment this to debug the empty ADD_DEPENDENCIES
		ENDIF()
	ENDIF()
ENDIF(COMMAND cmake_policy)

# Checking Apple OSX versions and generator
IF (APPLE)
	IF(${CMAKE_SYSTEM_VERSION} MATCHES "11.")
		SET(APPLE_LION ON)
		ADD_DEFINITIONS(-DAPPLE_LION)
	ELSEIF(${CMAKE_SYSTEM_VERSION} MATCHES "10.")
		SET(APPLE_SNOW_LEOPARD ON)
		ADD_DEFINITIONS(-DAPPLE_SNOW_LEOPARD)
	ELSEIF(${CMAKE_SYSTEM_VERSION} MATCHES "9.")
		SET(APPLE_LEOPARD ON)
		ADD_DEFINITIONS(-DAPPLE_LEOPARD)
	ENDIF()
	IF("${CMAKE_GENERATOR}" MATCHES "Xcode")
		FIND_PROGRAM(XCODEBUILD NAMES xcodebuild)
		IF(XCODEBUILD)
			EXEC_PROGRAM(${XCODEBUILD} ARGS "-version" OUTPUT_VARIABLE XCODE_VERSION_OUT RESULT_VARIABLE XCODE_VERSION_RES)
			STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1" XCODE_VERSION_MAJOR ${XCODE_VERSION_OUT})
			STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\2" XCODE_VERSION_MINOR ${XCODE_VERSION_OUT})
			STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\3" XCODE_VERSION_PATCH ${XCODE_VERSION_OUT})
			STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1.\\2.\\3" XCODE_VERSION ${XCODE_VERSION_OUT})
			IF(${XCODE_VERSION_MAJOR} LESS 4)
				MESSAGE("Using Xcode version ${XCODE_VERSION}, activating XCODE_OLD definition")
				SET(XCODE_OLD ON)
				ADD_DEFINITIONS(-DXCODE_OLD)
			ELSE()
				MESSAGE("Using Xcode version ${XCODE_VERSION}")
			ENDIF()
		ELSE()
			MESSAGE("Using Xcode of unidentified version")
		ENDIF()
		ADD_DEFINITIONS(-DXCODE)
	ENDIF()
ENDIF()

# Determine compiler versions
EXEC_PROGRAM(${CMAKE_C_COMPILER}
	ARGS --version
	OUTPUT_VARIABLE CMAKE_C_COMPILER_VERSION
)
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1" CMAKE_C_COMPILER_VERSION_MAJOR ${CMAKE_C_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\2" CMAKE_C_COMPILER_VERSION_MINOR ${CMAKE_C_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\3" CMAKE_C_COMPILER_VERSION_PATCH ${CMAKE_C_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1.\\2.\\3" CMAKE_C_COMPILER_VERSION ${CMAKE_C_COMPILER_VERSION})
#MESSAGE("CMAKE_C_COMPILER_VERSION_MAJOR: ${CMAKE_C_COMPILER_VERSION_MAJOR}")
#MESSAGE("CMAKE_C_COMPILER_VERSION_MINOR: ${CMAKE_C_COMPILER_VERSION_MINOR}")
#MESSAGE("CMAKE_C_COMPILER_VERSION_PATCH: ${CMAKE_C_COMPILER_VERSION_PATCH}")

#MESSAGE("CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
EXEC_PROGRAM(${CMAKE_CXX_COMPILER}
	ARGS --version
	OUTPUT_VARIABLE CMAKE_CXX_COMPILER_VERSION
)
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1" CMAKE_CXX_COMPILER_VERSION_MAJOR ${CMAKE_CXX_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\2" CMAKE_CXX_COMPILER_VERSION_MINOR ${CMAKE_CXX_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\3" CMAKE_CXX_COMPILER_VERSION_PATCH ${CMAKE_CXX_COMPILER_VERSION})
STRING(REGEX REPLACE ".*([0-9]+)\\.([0-9]+)\\.([0-9]+).*" "\\1.\\2.\\3" CMAKE_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION})
#MESSAGE("CMAKE_CXX_COMPILER_VERSION_MAJOR: ${CMAKE_CXX_COMPILER_VERSION_MAJOR}")
#MESSAGE("CMAKE_CXX_COMPILER_VERSION_MINOR: ${CMAKE_CXX_COMPILER_VERSION_MINOR}")
#MESSAGE("CMAKE_CXX_COMPILER_VERSION_PATCH: ${CMAKE_CXX_COMPILER_VERSION_PATCH}")

GET_FILENAME_COMPONENT(COMPILER ${CMAKE_C_COMPILER} NAME_WE)
STRING(COMPARE EQUAL "${COMPILER}" "clang" IS_CLANG) 
IF(0)#NOT IS_CLANG) # check symlinks first: /usr/bin/cc -> clang
IF(CMAKE_C_COMPILER_VERSION_MAJOR LESS 5 AND CMAKE_C_COMPILER_VERSION_MINOR LESS 2 AND CMAKE_CXX_COMPILER_VERSION_MAJOR LESS 5 AND CMAKE_CXX_COMPILER_VERSION_MINOR LESS 2) # we want at least 4.2 for OpenMP and old Xcode versions
	include(CMakeForceCompiler)
	#CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU) #CF
	#CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU) #CF
	IF(APPLE AND XCODE)
		set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "4.2")
	ENDIF()
	MESSAGE("Forced C/C++ compiler versions to 4.2")
ENDIF()
ENDIF()

IF(CMAKE_C_COMPILER_VERSION_MAJOR EQUAL 4 AND CMAKE_C_COMPILER_VERSION_MINOR EQUAL 7)
	#http://gcc.gnu.org/gcc-4.7/porting_to.html
	#MESSSAGE("using -fpermissive")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fpermissive") # for templates in armadillo
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fpermissive")
ENDIF()

#set_property(GLOBAL PROPERTY USE_FOLDERS ON)

######################
#       OPTIONS      #
######################

OPTION(BUILD_SHARED_LIBS "Build MediaCycle libraries as shared" OFF)
OPTION(SUPPORT_ALL "Support all media types (turn OFF to enable a selection)" ON)
OPTION(SUPPORT_3DMODEL "Support 3D model media" OFF)
OPTION(SUPPORT_AUDIO "Support audio media" OFF)
OPTION(SUPPORT_IMAGE "Support image media" OFF)
OPTION(SUPPORT_PDF "Support PDF media" OFF)
OPTION(SUPPORT_SENSOR "Support sensor media" OFF)
OPTION(SUPPORT_TEXT "Support text media" OFF)
OPTION(SUPPORT_VIDEO "Support video media" OFF)
OPTION(SUPPORT_MULTIMEDIA "Support multi media" OFF)
OPTION(SUPPORT_ARCHIPEL "Support Archipel La Mediatheque ASBL" OFF)
OPTION(SUPPORT_NAVIMED "Support NAVIMED polymedis" OFF)

OPTION(APPLE_IOS_DEV "Cross-compile for iPhone OS Device" OFF)
OPTION(APPLE_IOS_SIM "Cross-compile for iPhone OS Simulator" OFF)
OPTION(APPLE_IOS_XCODE "Generate an XCode project for cross-compiling for the iPhone OS" OFF)
OPTION(USE_DEBUG "Use Debug" ON)
OPTION(USE_OPENGL "Use OpenGL" ON)
OPTION(USE_OSG "Use OSG" ON) # Currently required in the core for 3D models or for GUI apps
OPTION(USE_OPENAL "Use OpenAL" ON)
OPTION(USE_PORTAUDIO "Use PortAudio" OFF)
OPTION(USE_STARPU "Use StarPU for CPU/GPU parallel feature extraction" ON)
OPTION(USE_OPENMP "Use OpenMP" OFF) # doesn't work on Snow Leopard, returns readv failed on Ubuntu 10.04
OPTION(USE_CORE_DISPATCH "Use Grand Central Dispatch in core" OFF)
IF ( NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
	IF(APPLE)
		OPTION(USE_COCOA "Use Cocoa" OFF)
                OPTION(USE_APPLE_MULTITOUCH "Use Apple multitouch support for io-applemultitouch" ON)
	ENDIF()
	OPTION(USE_QT4 "Use Qt4 Toolkit" OFF)
	OPTION(USE_QT5 "Use Qt5 Toolkit" ON)
	OPTION(USE_OSC "Use OpenSoundControl" ON)
	OPTION(USE_AUDIOFEAT "Using audio features" ON)
	OPTION(USE_LAUGHFEAT "Using laugh features" OFF)
	OPTION(USE_PSYCLONE "Use Psyclone" OFF)
	OPTION(BUILD_TESTS "Build tests" ON)
	OPTION(BUILD_PLUGINS "Build plugins" ON)
	OPTION(USE_AUDIOGARDEN "Use audiogarden" OFF)
	OPTION(USE_MAKAM "Use Makam experiments" OFF)
	OPTION(USE_VAMP "Use VAMP plugin SDK" OFF)
	OPTION(USE_YAAFE "Use YAAFE plugin" ON)
	OPTION(USE_EYESWEB "Build EyesWeb plugin" OFF)
	OPTION(USE_OCTAVE "Use Octave wrapper" OFF)
	OPTION(USE_GNUPLOT_I "Use gnuplot_i" ON)
	OPTION(USE_OPENNI "Use OpenNI" OFF)
	OPTION(USE_TORCH3 "Use Torch3" OFF)
	OPTION(USE_FALCON "Use Novint Falcon" OFF)
ENDIF()
OPTION(USE_FFMPEG "Use FFmpeg" ON)
OPTION(USE_BREAKPAD "Use Google Breakpad for automated/disabled crash reports" OFF)
OPTION(BUILD_ALL_APPS "Build apps" ON)
OPTION(BUILD_ALL_SINGLE_MEDIA_APPS "Build all single media apps but MultiMediaCycle (overridden by BUILD_ALL_APPS)" OFF)
OPTION(BUILD_LOOPJAM_APP "Build LoopJam app" OFF)
OPTION(BUILD_IVISIT_APPS "Build iVisit apps" OFF)
OPTION(BUILD_MULTIMEDIACYCLE_APP "Build MultiMediaCycle app" OFF)
OPTION(BUILD_AUDIOCYCLE_APP "Build AudioCycle app" OFF)
OPTION(BUILD_IMAGECYCLE_APP "Build ImageCycle app" OFF)
OPTION(BUILD_TEXTCYCLE_APP "Build TextCycle app" OFF)
OPTION(BUILD_VIDEOCYCLE_APP "Build VideoCycle app" OFF)
OPTION(BUILD_CLIS "Build command-line interface applications" ON)	
OPTION(USE_SDIF "Use SDIF" OFF)
OPTION(BUILD_DOCUMENTATION "Build MediaCycle reference documentation using doxygen (use: make documentation)" OFF)

# Current working config for cross-compiling with MXE
IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
	SET(BUILD_SHARED_LIBS OFF)
	SET(MC_PLUGINS_STATIC ON)
	SET(USE_OPENAL OFF)
	SET(USE_PORTAUDIO ON)
	SET(USE_OPENNI OFF)
	SET(BUILD_ALL_APPS OFF)
	SET(BUILD_ALL_SINGLE_MEDIA_APPS ON)
ENDIF()

######################
#     MEDIA TYPES    #
######################
MESSAGE("\nMedia types:")

IF(SUPPORT_ALL)
	SET(SUPPORT_3DMODEL ON)
	SET(SUPPORT_AUDIO ON)
	SET(SUPPORT_IMAGE ON)
	IF(NOT MINGW AND NOT CMAKE_TOOLCHAIN_FILE)
		SET(SUPPORT_PDF ON)
	ENDIF()
	SET(SUPPORT_SENSOR ON)
	SET(SUPPORT_TEXT ON)
	SET(SUPPORT_VIDEO ON)
	SET(SUPPORT_MULTIMEDIA ON)
	SET(SUPPORT_ARCHIPEL ON)
	SET(SUPPORT_NAVIMED ON)
ENDIF()

# SUPPORT_MULTIMEDIA works with any media type supported

IF(SUPPORT_ARCHIPEL)
	SET(SUPPORT_MULTIMEDIA ON)
	SET(SUPPORT_AUDIO ON)
	SET(SUPPORT_IMAGE ON)
	SET(SUPPORT_TEXT ON)
ENDIF()

IF(SUPPORT_NAVIMED)
	SET(SUPPORT_MULTIMEDIA ON)
	#SET(SUPPORT_IMAGE ON)
	SET(SUPPORT_SENSOR ON)
	SET(SUPPORT_TEXT ON)
ENDIF()

IF(SUPPORT_AUDIO)	
	IF(USE_AUDIOGARDEN AND NOT USE_AUDIOFEAT)
		MESSAGE(FATAL_ERROR "AudioGarden plugins require USE_AUDIOFEAT")
	ENDIF()
	IF(NOT USE_AUDIOFEAT AND NOT USE_YAAFE AND NOT USE_VAMP)
		MESSAGE(FATAL_ERROR "Audio support requires at least one audio plugin among: AudioFeatures (USE_AUDIOFEAT), Vamp (USE_VAMP), Yaafe (USE_YAAFE).")
	ENDIF()
ENDIF()

IF(SUPPORT_VIDEO)
	SET(SUPPORT_IMAGE ON) # necessary for inheritance in feature extraction plugins and osg visuals
ENDIF()

IF(NOT USE_DEBUG) # release mode
	# For now we want only multimediacycle-osg-qt with limited features
	# Synchronize libs/gui-osg-qt/ACMediaConfigDockWidgetQt.cpp in consequence
	SET(BUILD_CLIS ON)
	SET(BUILD_DOCUMENTATION OFF)
	#SET(BUILD_TESTS OFF)
	SET(SUPPORT_ALL OFF)
	SET(SUPPORT_3DMODEL OFF)
	#SET(SUPPORT_AUDIO ON)
	#SET(SUPPORT_IMAGE ON)
	#SET(SUPPORT_PDF ON)
	#SET(SUPPORT_SENSOR ON)
	#SET(SUPPORT_TEXT ON)
	#SET(SUPPORT_VIDEO ON)
	#SET(SUPPORT_MULTIMEDIA ON)
	#SET(SUPPORT_ARCHIPEL ON)
	#SET(SUPPORT_NAVIMED ON)
	SET(USE_AUDIOGARDEN OFF)
	#SET(USE_YAAFE OFF)
	SET(USE_EYESWEB OFF)
	SET(USE_COCOA OFF)
	SET(USE_PSYCLONE OFF)
	SET(USE_SDIF OFF)
	SET(USE_STARPU OFF)
	SET(USE_VAMP OFF)
	SET(USE_BREAKPAD ON)
ENDIF()

IF(NOT SUPPORT_3DMODEL AND NOT SUPPORT_AUDIO AND NOT SUPPORT_IMAGE AND NOT SUPPORT_PDF AND NOT SUPPORT_VIDEO AND NOT SUPPORT_SENSOR AND NOT SUPPORT_TEXT)
	MESSAGE(FATAL_ERROR "You need to enable support for at least one media type!")
ENDIF()

IF(BUILD_ALL_APPS)
        SET(BUILD_MULTIMEDIACYCLE_APP ON)
ENDIF()

IF(BUILD_ALL_APPS OR BUILD_ALL_SINGLE_MEDIA_APPS)
	IF(SUPPORT_AUDIO)
		SET(BUILD_AUDIOCYCLE_APP ON)
		SET(BUILD_LOOPJAM_APP ON)
	ENDIF()
	IF(SUPPORT_IMAGE)
		SET(BUILD_IMAGECYCLE_APP ON)
	ENDIF()
	IF(SUPPORT_TEXT)
		SET(BUILD_TEXTCYCLE_APP ON)
	ENDIF()
# 	IF(SUPPORT_VIDEO)
# 		SET(BUILD_VIDEOCYCLE_APP ON)
# 		SET(BUILD_IVISIT_APPS ON)
# 	ENDIF()
ENDIF()

IF(BUILD_ALL_APPS OR BUILD_ALL_SINGLE_APPS OR BUILD_LOOPJAM_APP OR BUILD_IVISIT_APPS OR BUILD_MULTIMEDIACYCLE_APP OR BUILD_AUDIOCYCLE_APP OR BUILD_IMAGECYCLE_APP OR BUILD_TEXTCYCLE_APP OR BUILD_VIDEOCYCLE_APP)
        SET(BUILD_APPS ON)
ENDIF()

IF(SUPPORT_ALL)
	MESSAGE("[X] (all)")
ELSE()
	MESSAGE("[ ] (all)")
ENDIF()
IF(SUPPORT_3DMODEL)
	MESSAGE("[X] 3D MODELS")
ELSE()
	MESSAGE("[ ] 3D MODELS")
ENDIF()
IF(SUPPORT_AUDIO)
	MESSAGE("[X] AUDIO")
ELSE()
	SET(USE_AUDIOGARDEN OFF)
	SET(USE_AUDIOFEAT OFF)
	SET(USE_LAUGHFEAT OFF)
	SET(USE_MAKAM OFF)
	SET(USE_VAMP OFF)
	SET(USE_YAAFE OFF)
	MESSAGE("[ ] AUDIO")
ENDIF()
IF(SUPPORT_IMAGE)
	MESSAGE("[X] IMAGE")
ELSE()
	MESSAGE("[ ] IMAGE")
ENDIF()
IF(SUPPORT_PDF)
	MESSAGE("[X] PDF")
ELSE()
	MESSAGE("[ ] PDF")
ENDIF()
IF(SUPPORT_SENSOR)
	MESSAGE("[X] SENSOR")
ELSE()
	MESSAGE("[ ] SENSOR")
ENDIF()
IF(SUPPORT_TEXT)
	MESSAGE("[X] TEXT")
ELSE()
	MESSAGE("[ ] TEXT")
ENDIF()
IF(SUPPORT_VIDEO)
	MESSAGE("[X] VIDEO")
ELSE()
	MESSAGE("[ ] VIDEO")
ENDIF()
IF(SUPPORT_MULTIMEDIA)
	add_definitions(-DSUPPORT_MULTIMEDIA)
	MESSAGE("[X] MULTIMEDIA")
ELSE()
	MESSAGE("[ ] MULTIMEDIA")
ENDIF()
IF(SUPPORT_ARCHIPEL)
	add_definitions(-DSUPPORT_ARCHIPEL)
	MESSAGE("[X] ARCHIPEL")
ELSE()
	MESSAGE("[ ] ARCHIPEL")
ENDIF()
IF(SUPPORT_NAVIMED)
	MESSAGE("[X] NAVIMED")
ELSE()
	MESSAGE("[ ] NAVIMED")
ENDIF()

######################
#     OS SPECIFIC    #
######################

IF(APPLE)
	FIND_PACKAGE(AppKit)
	IF(APPKIT_FOUND)
		MESSAGE("AppKit found: ${APPKIT_LIBRARY}")
	ELSE()
		MESSAGE("AppKit not found")
	ENDIF()
	FIND_PACKAGE(Accelerate)
	IF(ACCELERATE_FOUND)
		MESSAGE("Accelerate found: ${ACCELERATE_LIBRARY}")
	ELSE()
		MESSAGE("Accelerate not found")
	ENDIF()
        FIND_PACKAGE(CoreAudio)
        IF(COREAUDIO_FOUND)
                MESSAGE("CoreAudio found: ${COREAUDIO_LIBRARY}")
        ELSE()
                MESSAGE("CoreAudio not found")
        ENDIF()
	FIND_PACKAGE(CoreMIDI)
        IF(COREMIDI_FOUND)
                MESSAGE("CoreMIDI found: ${COREMIDI_LIBRARY}")
        ELSE()
                MESSAGE("CoreMIDI not found")
        ENDIF()
        FIND_PACKAGE(CoreGraphics)
        IF(COREGRAPHICS_FOUND)
                MESSAGE("CoreGraphics found: ${COREGRAPHICS_LIBRARY}")
        ELSE()
                MESSAGE("CoreGraphics not found")
        ENDIF()
	FIND_PACKAGE(CoreFoundation)
	IF(COREFOUNDATION_FOUND)
		MESSAGE("CoreFoundation found: ${COREFOUNDATION_LIBRARY}")
	ELSE()
		MESSAGE("CoreFoundation not found")
	ENDIF()
	FIND_PACKAGE(Foundation)
	IF(FOUNDATION_FOUND)
		MESSAGE("Foundation found: ${FOUNDATION_LIBRARY}")
	ELSE()
		MESSAGE("Foundation not found")
	ENDIF()
	FIND_PACKAGE(CoreData)
	IF(COREDATA_FOUND)
		MESSAGE("CoreData found: ${COREDATA_LIBRARY}")
	ELSE()
		MESSAGE("CoreData not found")
	ENDIF()
ENDIF()

# OS-SPECIFIC SUBPROJECTS COMPILATION
IF(UNIX)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF(UNIX)

# Ubuntu detection
IF(UNIX)
	# Try to find architecture
	execute_process(COMMAND uname -m OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE)
	string(STRIP "${CPACK_PACKAGE_ARCHITECTURE}" CPACK_PACKAGE_ARCHITECTURE)
	# Try to find distro name and distro-specific arch
	execute_process(COMMAND lsb_release -is OUTPUT_VARIABLE LSB_ID)
	execute_process(COMMAND lsb_release -rs OUTPUT_VARIABLE LSB_RELEASE)
	string(STRIP "${LSB_ID}" LSB_ID)
	string(STRIP "${LSB_RELEASE}" LSB_RELEASE)
	set(LSB_DISTRIB "${LSB_ID}${LSB_RELEASE}")
	IF(NOT LSB_DISTRIB)
		set(LSB_DISTRIB "unix")
	ENDIF(NOT LSB_DISTRIB)
ENDIF()

# Apple architectures
IF(APPLE AND NOT APPLE_IOS_XCODE AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE)
	FIND_PACKAGE(MacPorts)
	IF(MACPORTS_FOUND)
		IF(MACPORTS_UNIVERSAL_FLAG_SET)
			SET(CMAKE_OSX_ARCHITECTURES "${MACPORTS_UNIVERSAL_ARCHS}" CACHE STRING "Building with MacPorts for ${MACPORTS_UNIVERSAL_ARCHS}" FORCE)
		ELSE()
			SET(CMAKE_OSX_ARCHITECTURES "${MACPORTS_BUILD_ARCH}" CACHE STRING "Building with MacPorts for ${MACPORTS_BUILD_ARCH}" FORCE)
		ENDIF()
	ELSE()
		IF(${CMAKE_SYSTEM_VERSION} GREATER "9.") # Mac OS X 10.6 and above
			SET(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Building for x86_64" FORCE)
		ELSE()
			SET(CMAKE_OSX_ARCHITECTURES "i386" CACHE STRING "Building for i386 (FFmpeg and QTKit support currently broken on Snow Leopard)" FORCE)
		ENDIF()
	ENDIF()
ENDIF()

# Win32
IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
	MESSAGE("Cross-compiling for windows with mingw")
	set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	SET(BUILD_SHARED_LIBS OFF)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static")
ENDIF()

# iOS DEVEL SPECIFIC
IF (APPLE_IOS_DEV OR APPLE_IOS_SIM)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.2")
		MESSAGE(FATAL_ERROR "Generating an Makefile project for iPhone OS Device/Simulator requires CMake version 2.8.2 and up.")
	ENDIF()
ENDIF()
IF (APPLE_IOS_XCODE AND NOT(${CMAKE_VERSION} STREQUAL "2.8.0"))
	MESSAGE(FATAL_ERROR "Generating an XCode project for iPhone OS works with CMake v. 2.8.0 only (2.8.2 produces corrupted project files).")
ENDIF()
IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
	SET(SUPPORT_IMAGE OFF) # Problem with OpenCV highgui
	SET(SUPPORT_VIDEO OFF) # Problem with OpenCV highgui

	IF( APPLE_IOS_DEV AND APPLE_IOS_SIM )
		MESSAGE(FATAL_ERROR "Cross-compile for iPhone OS Device OR Simulator at one time!")
	ENDIF()
	IF( NOT APPLE )
		MESSAGE(FATAL_ERROR "Cross-compiling for iPhone OS Device or Simulator works currently only on Apple OSX systems")
	ENDIF()

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAPPLE_IOS")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DAPPLE_IOS")
ENDIF()

SET(PLUGIN_PREFIX "mc_")
# SET(PLUGIN_SUFFIX ".mcp") #change OS-dependent extension (so, dll, dylib) to a fixed one (.mcp)
IF(APPLE) # assuming all are dynamic libraries for now
    SET(PLUGIN_SUFFIX "dylib") 
ELSE()
    IF(UNIX)
        SET(PLUGIN_SUFFIX "so") # since CMAKE_SHARED_LIBRARY_PREFIX returns "lib" on Ubuntu
    ELSE()
        SET(PLUGIN_SUFFIX "dll")
    ENDIF()
ENDIF()

IF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(BUILD_SHARED_LIBS OFF)
ENDIF ( WIN32 )

IF ( APPLE )
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
			INCLUDE_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/include" )
			LINK_DIRECTORIES( "${CMAKE_INSTALL_PREFIX}/lib" )
		ENDIF()
		IF ( APPLE_IOS_XCODE )
			# Basic iPhone SDK detection (we need v. 4.2 currently, 4.1 unsupported)
			IF(EXISTS /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk)
				SET(iPhoneOS_SDK_FOUND TRUE)
			ENDIF()
			IF(EXISTS /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk)
				SET(iPhoneSimulator_SDK_FOUND TRUE)
			ENDIF()
			IF (iPhoneOS_SDK_FOUND AND iPhoneSimulator_SDK_FOUND)
				MESSAGE("Found iPhone SDK v.4.2")
				set(iPhoneOS_SDK_ROOT "/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.2.sdk")
				set(iPhoneSimulator_SDK_ROOT "/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.2.sdk")
				set(iPhoneOS_DEPS_ROOT "/opt/ios/device/4.2")
				set(iPhoneSimulator_DEPS_ROOT "/opt/ios/simulator/4.2")

  				# Force gcc <= 4.2 on iPhone
  				include(CMakeForceCompiler)
  				CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
  				CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)

				SET(CMAKE_BUILD_TYPE Release)
				SET(CMAKE_FIND_ROOT_PATH "${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_SDK_ROOT}/System/Library/Frameworks/" "${iPhoneOS_DEPS_ROOT}" "${iPhoneSimulator_DEPS_ROOT}")
				SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
				SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
				SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				INCLUDE_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/include")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				LINK_DIRECTORIES( "${iPhoneSimulator_DEPS_ROOT}/lib")
				SET(OpenCV_ROOT_DIR "${iPhoneSimulator_DEPS_ROOT}")

				# Set build variables
				set(CMAKE_OSX_SYSROOT iphoneos4.2)
				set(CMAKE_OSX_DEPLOYMENT_TARGET "")
				set(CMAKE_OSX_ARCHITECTURES "$(ARCHS_UNIVERSAL_IPHONE_OS)")
				set(CMAKE_EXE_LINKER_FLAGS "-framework Foundation -framework CoreGraphics -framework QuartzCore -framework UIKit")
				set(XCODE_ATTRIBUTE_SDKROOT iphoneos4.2)
				set(MACOSX_BUNDLE_GUI_IDENTIFIER "com.yourcompany.\${PRODUCT_NAME:rfc1034identifier}")
				add_definitions(-fno-regmove)
				remove_definitions(-msse)
			ELSE()
				MESSAGE(FATAL_ERROR "iPhone SDK v.4.2 required")
			ENDIF()
		ENDIF()
        ENDIF()
ENDIF ( APPLE )

IF ( USE_DEBUG )
	MESSAGE( "\nConfigured for Debug Build")
        SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1")
        IF(APPLE OR UNIX)
            SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
        ENDIF()
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_VERBOSE_MAKEFILE ON)
ELSE ( USE_DEBUG )
	MESSAGE( "\nConfigured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "MinSizeRel")#Debug|Release|RelWithDebInfo|MinSizeRel
	SET(CMAKE_VERBOSE_MAKEFILE OFF)#CF
	IF(APPLE)
		SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/release")
	ENDIF()
ENDIF ( USE_DEBUG )

#########################
# EXTERNAL DEPENDENCIES #
#########################

MESSAGE("\nExternal libraries:")

FIND_PACKAGE (PkgConfig)
IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
	IF(PKG_CONFIG_FOUND)
		SET(PKG_CONFIG_EXECUTABLE ${PKG_CONFIG_EXECUTABLE} CACHE STRING "pkg-config")
	ELSE()
		MESSAGE(FATAL_ERROR "pkgconfig required for cross-compiling with MXE for windows")
	ENDIF()
ENDIF()

#Threads
FIND_PACKAGE ( Threads )

#Java (for the archipel HTML to XML converter)
IF(SUPPORT_ARCHIPEL)
	FIND_PACKAGE(Java)
ENDIF()

#TinyXML
FIND_PACKAGE(TinyXML) # not yet REQUIRED until we remove 3rdparty/tinyxml
IF(TINYXML_FOUND)
	INCLUDE_DIRECTORIES(${TINYXML_INCLUDE_DIR})
ENDIF()

#Boost (serialization + system + filesystem + graph + thread + program_options)
SET(BOOST_THREAD "thread")
IF(MINGW OR WIN32)
	SET(BOOST_THREAD "thread_win32")
	add_definitions(-D_WIN32_WINNT=0x0501 -DBOOST_THREAD_USE_LIB -DBOOST_USE_WINDOWS_H)
ENDIF()
IF (SUPPORT_TEXT)
       FIND_PACKAGE ( Boost REQUIRED COMPONENTS serialization system filesystem locale graph ${BOOST_THREAD} program_options)
ELSE()
       FIND_PACKAGE ( Boost REQUIRED COMPONENTS serialization system filesystem graph ${BOOST_THREAD} program_options)
ENDIF()
IF ( Boost_FOUND )
	MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
	IF ( WIN32 )
		SET( Boost_USE_STATIC_LIBS ON)
		if (Boost_FOUND)# AND WIN32 AND Boost_USE_STATIC_LIBS)
      			if(Boost_VERSION GREATER 104900) # 1.50
			find_package(Boost REQUIRED COMPONENTS ${BOOST_THREAD} chrono)
			MESSAGE( "Found boost chrono necessary for win32: ${Boost_CHRONO_LIBRARY}" )
	    		endif()
		endif()
	ENDIF ( WIN32 )
	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	ADD_LINKED_DIRECTORY(${Boost_LIBRARY_DIRS})
	IF(MINGW OR WIN32)
		SET(Boost_THREAD_LIBRARY ${Boost_THREAD_WIN32_LIBRARY})
		SET(Boost_LOCALE_LIBRARY ${Boost_LOCALE_LIBRARY} "-liconv")
	ENDIF()
	MESSAGE("Using Boost libraries: ${Boost_SERIALIZATION_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_GRAPH_LIBRARY} ${Boost_THREAD_LIBRARY} ${Boost_PROGRAM_OPTIONS_LIBRARY} ${Boost_LOCALE_LIBRARY} ${Boost_CHRONO_LIBRARY}")
ELSE ( Boost_FOUND )
	MESSAGE(FATAL_ERROR "Boost requested but not found.")
ENDIF ( Boost_FOUND )

#OpenSSL (required for using boost::asio)
FIND_PACKAGE(OpenSSL)

# FFmpeg, used as plugin for OSG and OpenCV
# TODO: if FFmpeg found, check for OSG and OpenCV plugins
# TODO: replace libsndfile/libsamplerate with FFmpeg for audio?
IF(USE_FFMPEG)# AND SUPPORT_VIDEO)
    FIND_PACKAGE( FFmpeg )
    MESSAGE("Looking for FFmpeg libraries:")
    MESSAGE("  avformat library: ${FFMPEG_LIBAVFORMAT_FOUND} ${FFMPEG_LIBAVFORMAT_LIBRARIES}")
    MESSAGE("  avdevice library: ${FFMPEG_LIBAVDEVICE_FOUND} ${FFMPEG_LIBAVDEVICE_LIBRARIES}")
    MESSAGE("  avcodec library: ${FFMPEG_LIBAVCODEC_FOUND} ${FFMPEG_LIBAVCODEC_LIBRARIES}")
    MESSAGE("  avfilter library: ${FFMPEG_LIBAVFILTER_FOUND} ${FFMPEG_LIBAVFILTER_LIBRARIES}")
    MESSAGE("  avutil library: ${FFMPEG_LIBAVUTIL_FOUND} ${FFMPEG_LIBAVUTIL_LIBRARIES}")
    MESSAGE("  swscale library: ${FFMPEG_LIBSWSCALE_FOUND} ${FFMPEG_LIBSWSCALE_LIBRARIES}")
    MESSAGE("  swresample library: ${FFMPEG_LIBSWRESAMPLE_FOUND} ${FFMPEG_LIBSWRESAMPLE_LIBRARIES}")
    IF(FFMPEG_FOUND)
	INCLUDE_DIRECTORIES(${FFMPEG_INCLUDE_DIR} ${FFMPEG_INCLUDE_DIRS})

	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVFORMAT_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVDEVICE_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVCODEC_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBAVUTIL_LIBRARIES})
	ADD_LIB_LINKED_DIR(${FFMPEG_LIBSWSCALE_LIBRARIES})
       #ADD_LIB_LINKED_DIR(${FFMPEG_LIBSWRESAMPLE_LIBRARIES})

	IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
                PKG_CHECK_MODULES (FFMPEG_PKG REQUIRED libavformat libavdevice libavcodec libavfilter libavutil libswscale libswresample)
		IF (FFMPEG_PKG_FOUND)
			MESSAGE( "FFmpeg cflags found through pkg-config: ${FFMPEG_PKG_CFLAGS}" )
			MESSAGE( "FFmpeg ldflags found through pkg-config: ${FFMPEG_PKG_LDFLAGS}" )
                        IF(USE_DEBUG)
                            STRING (REPLACE "-mwindows;" "" FFMPEG_PKG_LDFLAGS "${FFMPEG_PKG_LDFLAGS}")
                        ENDIF()
			STRING(REGEX REPLACE ";" " " FFMPEG_CFLAGS "${FFMPEG_PKG_CFLAGS}")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FFMPEG_CFLAGS}")
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FFMPEG_CFLAGS}")
			LIST(APPEND FFMPEG_LIBRARIES ${FFMPEG_PKG_LDFLAGS})
		ELSE (FFMPEG_PKG_FOUND)
			MESSAGE( FATAL_ERROR "FFmpeg cflags/ldflags not found through pkg-config." )
		ENDIF (FFMPEG_PKG_FOUND)
	ENDIF()
	MESSAGE("Found all FFmpeg libraries in ${FFMPEG_LIBRARIES}.")
    ELSE()
        MESSAGE(FATAL_ERROR "Some FFmpeg libraries are missing.")
    ENDIF()
    IF(CMAKE_COMPILER_IS_GNUCXX)
        # Remove -pedantic flag as it barfs on ffmpeg headers
        STRING(REGEX REPLACE "-pedantic" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    ENDIF()
ENDIF()

# Quicktime
IF(APPLE)
	FIND_PACKAGE(Carbon)
	IF(CARBON_FOUND)
		MESSAGE("Carbon found: ${CARBON_LIBRARY}")
	ELSE()
		MESSAGE("Carbon not found")
	ENDIF()
        FIND_PACKAGE(Cocoa)
	IF(COCOA_FOUND)
		MESSAGE("Cocoa found: ${COCOA_LIBRARY}")
	ELSE()
		MESSAGE("Cocoa not found")
	ENDIF()
	IF(SUPPORT_VIDEO)
		FIND_PACKAGE(CoreVideo)
		IF(COREVIDEO_FOUND)
			MESSAGE("CoreVideo found: ${COREVIDEO_LIBRARY}")
		ELSE()
			MESSAGE("CoreVideo not found")
		ENDIF()
		FIND_PACKAGE(QuickTime)
		IF(QUICKTIME_FOUND)
			MESSAGE("Found QuickTime")
		ELSE()
			MESSAGE("QuickTime not found")
		ENDIF()
		FIND_PACKAGE(QTKit)
		IF(QTKIT_FOUND)
			MESSAGE("Found QTKit")
		ELSE()
			MESSAGE("QTKit not found")
		ENDIF()
	ENDIF()
ENDIF()

# libsndfile
IF(SUPPORT_AUDIO)
FIND_PACKAGE ( Sndfile REQUIRED )
IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
	PKG_CHECK_MODULES (SNDFILEPKG REQUIRED sndfile)
	IF (SNDFILEPKG_FOUND)
		MESSAGE( "sndfile cflags found through pkg-config: ${SNDFILEPKG_CFLAGS}" )
		MESSAGE( "sndfile ldflags found through pkg-config: ${SNDFILEPKG_LDFLAGS}" )
		STRING(REGEX REPLACE ";" " " SNDFILE_CFLAGS "${SNDFILEPKG_CFLAGS}")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SNDFILE_CFLAGS}")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SNDFILE_CFLAGS}")
		SET(SNDFILE_LIBRARIES ${SNDFILE_LIBRARY})
		LIST(APPEND SNDFILE_LIBRARIES ${SNDFILEPKG_LDFLAGS})
		MESSAGE("sndfile libraries ${SNDFILE_LIBRARIES}")
	ELSE (SNDFILEPKG_FOUND)
		MESSAGE( FATAL_ERROR "sndfile cflags/ldflags not found through pkg-config." )
	ENDIF (SNDFILEPKG_FOUND)
ELSE()
	IF(SNDFILE_FOUND)
		MESSAGE("libsndfile found.")
		MESSAGE("Using libsndfile library: ${SNDFILE_LIBRARY}")
		INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR})
		ADD_LINKED_DIRECTORY(${SNDFILE_LINK_DIRECTORIES})
	ELSE(SNDFILE_FOUND)
		MESSAGE(FATAL_ERROR "libsndfile required but not found.")
	ENDIF(SNDFILE_FOUND)
	SET(SNDFILE_LIBRARIES ${SNDFILE_LIBRARY})
ENDIF()
ENDIF(SUPPORT_AUDIO)

# OpenCV
IF(SUPPORT_VIDEO OR SUPPORT_IMAGE)
	IF(SUPPORT_VIDEO)
	    SET(OpenCV_MIN_VERSION "2.3.1")
	ELSE()
	   SET(OpenCV_MIN_VERSION "2.0.0")
	ENDIF()

	find_path(OpenCV_DIR NAMES opencv-config.cmake OpenCVConfig.cmake PATH_SUFFIXES lib/cmake) # for MacPorts

        #FIND_PACKAGE ( OpenCV REQUIRED COMPONENTS core contrib features2d imgproc legacy objdetect video highgui) # < 3.0.0
        FIND_PACKAGE ( OpenCV REQUIRED COMPONENTS core features2d imgproc objdetect video highgui) # >= 3.0.0

        # other components (at v. 2.2.0): calib3d ffmpeg? flann gpu haartraining ml traincascade
        # other components (at v. 2.3.0): androidcamera calib3d flann gpu haartraining ml stitching traincascade ts
        # other components (at v. 2.4.2): androidcamera calib3d flann gpu java ml nonfree photo stitching ts videostab world

	IF ( OpenCV_FOUND )
		IF(${OpenCV_VERSION} VERSION_LESS ${OpenCV_MIN_VERSION})
			MESSAGE(FATAL_ERROR "OpenCV version (${OpenCV_VERSION} is present, while ${OpenCV_MIN_VERSION}+ is required")
		ENDIF()

		IF(OpenCV_opencv_highgui_EXTRA_DEPS_OPT AND CMAKE_TOOLCHAIN_FILE AND MINGW)
			string(REGEX MATCH ".*QtCore.*" OpenCV_WITH_Qt "${OpenCV_opencv_highgui_EXTRA_DEPS_OPT}")
			IF(OpenCV_WITH_Qt)
				MESSAGE("OpenCV with Qt")
			ENDIF()
		ENDIF()

		# TODO: check for FFmpeg plugin #CvCapture_FFMPEG
                foreach(OpenCV_INCLUDE_DIR ${OpenCV_INCLUDE_DIRS})
                        INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIR})
                endforeach(OpenCV_INCLUDE_DIR)
		IF(MINGW OR WIN32)
			SET(OpenCV_LIBRARIES ${OpenCV_LIBS_OPT} ${OpenCV_EXTRA_LIBS_OPT})
		ELSE()
			SET(OpenCV_LIBRARIES ${OpenCV_LIBS})
		ENDIF()
                MESSAGE("Found OpenCV ${OpenCV_VERSION} libraries ${OpenCV_LIBRARIES} and headers ${OpenCV_INCLUDE_DIRS}")
		#MESSAGE( "OpenCV link directories: ${OpenCV_LIB_DIRECTORY}")
		foreach(OpenCV_LIB_DIRECTORY ${OpenCV_LIB_DIRS})
			ADD_LINKED_DIRECTORY(${OpenCV_LIB_DIRECTORY})
		endforeach(OpenCV_LIB_DIRECTORY)
	ELSE ( OpenCV_FOUND)
		MESSAGE(FATAL_ERROR "OpenCV not found.")
	ENDIF ( OpenCV_FOUND )
ENDIF(SUPPORT_VIDEO OR SUPPORT_IMAGE)

# OpenGL
#IF ( USE_OPENGL ) # necessary for OpenSceneGraph which is currently a core dependency
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenGLES.framework)
			SET(OPENGL_FOUND TRUE)
		ENDIF()	
        ELSEIF (MINGW AND CMAKE_TOOLCHAIN_FILE)
                find_path(OPENGL_INCLUDE_DIR GL/gl.h OpenGL/gl.h)
                find_library(OPENGL_gl_LIBRARY NAMES opengl32 OpenGL MesaGL PATHS /usr/X11R6/lib)
                find_library(OPENGL_glu_LIBRARY NAMES glu32 AGL MesaGLU PATHS /usr/X11R6/lib)
                include(FindPackageHandleStandardArgs)
                FIND_PACKAGE_HANDLE_STANDARD_ARGS(OPENGL DEFAULT_MSG OPENGL_gl_LIBRARY OPENGL_INCLUDE_DIR)
                SET(OPENGL_LIBRARIES "-lglu32" "-lopengl32")
         ELSE()
                FIND_PACKAGE( OpenGL REQUIRED ) # the default FindOpenGL.cmake is deprecated for MINGW but required by FindQt4 et al...
                #SET(OPENGL_LIBRARIES ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})
        ENDIF()
	IF ( OPENGL_FOUND )
                MESSAGE ( "Found OpenGL: ${OPENGL_gl_LIBRARY} / ${OPENGL_LIBRARIES} in ${OPENGL_INCLUDE_DIR}" )
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} )
		ENDIF()
	ELSE ( OPENGL_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL not found.")
	ENDIF ( OPENGL_FOUND )
#ENDIF ( USE_OPENGL )

# Freetype for osgdb_freetype
IF(USE_OSG)
	FIND_PACKAGE(FreeType REQUIRED) # to display text in OSG
	IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
		PKG_CHECK_MODULES (FREETYPEPKG REQUIRED freetype2)
		IF (FREETYPEPKG_FOUND)
			MESSAGE( "FreeType cflags found through pkg-config: ${FREETYPEPKG_CFLAGS}" )
			MESSAGE( "FreeType ldflags found through pkg-config: ${FREETYPEPKG_LDFLAGS}" )
			STRING(REGEX REPLACE ";" " " FREETYPE_CFLAGS "${FREETYPEPKG_CFLAGS}")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FREETYPE_CFLAGS}")
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${FREETYPE_CFLAGS}")
			SET(FREETYPE_LIBRARIES ${FREETYPEPKG_LDFLAGS})
			MESSAGE("FreeType libraries: ${FREETYPE_LIBRARIES}")
		ELSE (FREETYPEPKG_FOUND)
			MESSAGE( FATAL_ERROR "FreeType cflags/ldflags not found through pkg-config." )
		ENDIF (FREETYPEPKG_FOUND)
	ELSE()
		SET(FREETYPE_LIBRARIES ${FREETYPE_LIBRARY})
	ENDIF()
ENDIF()

#OSG
IF(SUPPORT_VIDEO)
	SET(OSG_REQUIRED_VERSION "3.1.1") # for ImageStream::getCurrentTime necessary for video sync in the timeline
ELSE()
	SET(OSG_REQUIRED_VERSION "3.0.0")
ENDIF()

IF(USE_OSG)
        FIND_PACKAGE(OpenSceneGraph ${OSG_REQUIRED_VERSION} REQUIRED osgQt osgViewer osgText osgUtil osgDB osgGA osgWidget osg OpenThreads)
ELSE()
	IF(SUPPORT_3DMODEL)
		FIND_PACKAGE(OpenSceneGraph ${OSG_REQUIRED_VERSION} REQUIRED osgDB osgGA OpenThreads)
	ENDIF()
ENDIF()
IF(USE_OSG OR USE_3DMODEL)
	IF(OSG_FOUND)
		#CF we need to be able to display images (library cover) for any media type
                IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO)
                        SET(OPENSCENEGRAPH_CORE_LIBRARIES ${OSGDB_LIBRARY};${OSGGA_LIBRARY};${OSG_LIBRARY};${OPENTHREADS_LIBRARY})
                ENDIF()
                #IF(BUILD_APPS)
                #	SET(OPENSCENEGRAPH_LIBRARIES ${OPENSCENEGRAPH_LIBRARIES};${OSG_LIBRARY};${OPENTHREADS_LIBRARY})
                #ENDIF()
                ADD_LIB_LINKED_DIR(${OSG_LIBRARY})
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE) # OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM
			ADD_DEFINITIONS(-DOSG_LIBRARY_STATIC)
			MESSAGE( "PkgConfig found: ${PKG_CONFIG_EXECUTABLE}" )
			PKG_CHECK_MODULES (OSGPLUGINS openscenegraph-osgPlugins)
			IF (OSGPLUGINS_FOUND)
				MESSAGE( "osgPlugins ldflags found through pkg-config: ${OSGPLUGINS_LDFLAGS}" )
			ELSE (OSGPLUGINS_FOUND)
				MESSAGE( "osgPlugins ldflags not found through pkg-config." )
			ENDIF (OSGPLUGINS_FOUND)
		ENDIF()

		# OSG plugins check (required at least for text display in apps)
		STRING(REPLACE "include" "lib" OSG_LIBRARY_DIR ${OSG_INCLUDE_DIR}) #CF check NOT MINGW Windows systems, might be under "bin" instead of "lib"	
		#CF we need to be able to display images (library cover) for any media type
		#IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO)
			MESSAGE("-- Found core OpenSceneGraph libraries: ${OPENSCENEGRAPH_CORE_LIBRARIES}")
		#ENDIF()
		IF(BUILD_APPS)
			ADD_LIB_LINKED_DIR(${OSGVIEWER_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGTEXT_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGUTIL_LIBRARY})
			MESSAGE("-- Found gui OpenSceneGraph libraries: ${OPENSCENEGRAPH_LIBRARIES}")
		ENDIF()
		
		FILE(GLOB OSG_PLUGINS ${OSG_LIBRARY_DIR}/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*)
		IF(APPLE)
			IF(EXISTS /opt/local/bin/port)#CF do a proper check
				SET(MACPORTS_FOUND ON)
			ENDIF()
			SET(DYLD_LIBRARY_PATH $ENV{DYLD_LIBRARY_PATH})
			FILE(GLOB CORRECT_OSG_PLUGINS_PATH
				~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/Network/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}
			)
			FILE(GLOB INCORRECT_OSG_PLUGINS_PATH
				/opt/local/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/usr/local/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
				/usr/lib/osgPlugins-${OPENSCENEGRAPH_VERSION}
			)# OSG wont find these unless DYLD_LIBRARY_PATH is set, but it conflicts with MacPorts...
			STRING(REPLACE "/osgPlugins-*" "" INCORRECT_OSG_PLUGINS_PREFIX "${INCORRECT_OSG_PLUGINS_PATH}")
			IF(INCORRECT_OSG_PLUGINS_PATH AND NOT DYLD_LIBRARY_PATH AND NOT CORRECT_OSG_PLUGINS_PATH)
				IF(MACPORTS_FOUND)
					MESSAGE("\n\nPlease first copy your / create a symbolic link from your most recent OSG plugins folder ${INCORRECT_OSG_PLUGINS_PATH}")
                			MESSAGE("to ~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}")
                	 		MESSAGE("or /Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}")
                			MESSAGE("Example: mkdir -p '/Library/Application\ Support/OpenSceneGraph/PlugIns'")
                			MESSAGE("Then: sudo ln -s '${INCORRECT_OSG_PLUGINS_PATH}' '/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}'\n\n") 
                			MESSAGE(FATAL_ERROR "See the error message just above.") 
				ELSE()
					STRING(REPLACE ";" ":" INCORRECT_OSG_PLUGINS_PREFIX "${INCORRECT_OSG_PLUGINS_PREFIX}")
					MESSAGE("Please first add to your ~/.profile: export DYLD_LIBRARY_PATH=\$DYLD_LIBRARY_PATH:${INCORRECT_OSG_PLUGINS_PREFIX}")
					MESSAGE(FATAL_ERROR "and run: source ~/.profile")
				ENDIF()
			ENDIF()
			IF(CORRECT_OSG_PLUGINS_PATH AND NOT OSG_PLUGINS)
				FILE(GLOB OSG_PLUGINS
					~/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
					/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
					/Network/Library/Application\ Support/OpenSceneGraph/PlugIns/osgPlugins-${OPENSCENEGRAPH_VERSION}/*osgdb_*
				)
			ENDIF()
		ENDIF()
		SET(OSG_PLUGINS_3DMODEL "3dc;3ds;ac3d;bsp;dae;dw;dxf;fbx;geo;Inventor;ive;logo;lwo;lws;md2;obj;ogr;Openflight;osg;pfb;shp;stl;vrml;x")
		SET(OSG_PLUGINS_IMAGE "bmp;dds;gdal;gif;hdr;imageio;jp2;jpeg;Openflight;pic;png;pnm;qt;QTKit;rgb;tga;tiff")
		SET(OSG_PLUGINS_VIDEO "ffmpeg;qt;QTKit;xine")
		SET(OSG_PLUGINS_TEXT "freetype")#;txf")
		MESSAGE("OSG plugins:")
		set(N_OSG_PLUG_3DMODEL 0)
		set(N_OSG_PLUG_IMAGE 0)
		set(N_OSG_PLUG_VIDEO 0)
		set(N_OSG_PLUG_TEXT 0)
		foreach(OSG_PLUGIN ${OSG_PLUGINS})
			GET_FILENAME_COMPONENT(OSG_PLUGIN_NAME_WE ${OSG_PLUGIN} NAME_WE)
			IF ( MINGW OR WIN32 )
				STRING(REGEX REPLACE "libosgdb_" "" OSG_PLUGIN_NAME_WE "${OSG_PLUGIN_NAME_WE}" )
			ELSE()
				STRING(REGEX REPLACE "osgdb_" "" OSG_PLUGIN_NAME_WE "${OSG_PLUGIN_NAME_WE}" )
			ENDIF()
			
			#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}")
			IF(SUPPORT_3DMODEL)
				foreach(OSG_PLUGIN_3DMODEL ${OSG_PLUGINS_3DMODEL})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_3DMODEL}" IS_3DMODEL) 
					IF(IS_3DMODEL)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: 3DMODEL")
						math(EXPR N_OSG_PLUG_3DMODEL ${N_OSG_PLUG_3DMODEL}+1)
						IF(N_OSG_PLUG_3DMODEL EQUAL 1)
							SET(OSGPLUGINS_3DMODEL "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_3DMODEL "${OSGPLUGINS_3DMODEL}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_3DMODEL)
			ENDIF()
			#CF we need to be able to display images (library cover) for any media type
			#IF(SUPPORT_IMAGE)
				foreach(OSG_PLUGIN_IMAGE ${OSG_PLUGINS_IMAGE})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_IMAGE}" IS_IMAGE) 
					IF(IS_IMAGE)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: IMAGE")
						math(EXPR N_OSG_PLUG_IMAGE ${N_OSG_PLUG_IMAGE}+1)
						IF(N_OSG_PLUG_IMAGE EQUAL 1)
							SET(OSGPLUGINS_IMAGE "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_IMAGE "${OSGPLUGINS_IMAGE}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_IMAGE)
			#ENDIF()
			IF(SUPPORT_VIDEO)
				foreach(OSG_PLUGIN_VIDEO ${OSG_PLUGINS_VIDEO})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_VIDEO}" IS_VIDEO) 
					IF(IS_VIDEO)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: VIDEO")
						math(EXPR N_OSG_PLUG_VIDEO ${N_OSG_PLUG_VIDEO}+1)
						IF(N_OSG_PLUG_VIDEO EQUAL 1)
							SET(OSGPLUGINS_VIDEO "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_VIDEO "${OSGPLUGINS_VIDEO}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_VIDEO)
			ENDIF()
			#IF(SUPPORT_TEXT)
				foreach(OSG_PLUGIN_TEXT ${OSG_PLUGINS_TEXT})
					STRING(COMPARE EQUAL "${OSG_PLUGIN_NAME_WE}" "${OSG_PLUGIN_TEXT}" IS_TEXT) 
					IF(IS_TEXT)
						#MESSAGE("-- ${OSG_PLUGIN_NAME_WE}: TEXT")
						math(EXPR N_OSG_PLUG_TEXT ${N_OSG_PLUG_TEXT}+1)
						IF(N_OSG_PLUG_TEXT EQUAL 1)
							SET(OSGPLUGINS_TEXT "${OSG_PLUGIN}")
						ELSE()
							SET(OSGPLUGINS_TEXT "${OSGPLUGINS_TEXT}" "${OSG_PLUGIN}")
						ENDIF()
					ENDIF()
				endforeach(OSG_PLUGIN_TEXT)
			#ENDIF()
			
			#ADD_LINKED_DIRECTORY(${DIR})
		endforeach(OSG_PLUGIN)
		
		IF(SUPPORT_3DMODEL)
			MESSAGE("-- Found ${N_OSG_PLUG_3DMODEL} 3DMODEL OSG plugins: ${OSGPLUGINS_3DMODEL}")
		ENDIF()
		#CF we need to be able to display images (library cover) for any media type
		#IF(SUPPORT_IMAGE)
			MESSAGE("-- Found ${N_OSG_PLUG_IMAGE} IMAGE OSG plugins: ${OSGPLUGINS_IMAGE}")
		#ENDIF()
		IF(SUPPORT_VIDEO)
			MESSAGE("-- Found ${N_OSG_PLUG_VIDEO} VIDEO OSG plugins: ${OSGPLUGINS_VIDEO}")
		ENDIF()
		#IF(SUPPORT_TEXT)	
			MESSAGE("-- Found ${N_OSG_PLUG_TEXT} TEXT OSG plugins: ${OSGPLUGINS_TEXT}")
		#ENDIF()
                #MESSAGE("OPENSCENEGRAPH_LIBRARIES ${OPENSCENEGRAPH_LIBRARIES}")

		IF(SUPPORT_IMAGE)
			FILE(GLOB OSG_BMP_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_bmp*)
			FILE(GLOB OSG_JPG_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_jpg*)
			FILE(GLOB OSG_PNG_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_png*)
		ENDIF(SUPPORT_IMAGE)
		IF(SUPPORT_VIDEO)
			FILE(GLOB OSG_FFMPEG_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_ffmpeg*)
			FILE(GLOB OSG_QUICKTIME_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_qt*)
			FILE(GLOB OSG_QTKIT_PLUGIN ${OSG_LIBRARY_DIR}/osgPlugins-*/*osgdb_QTKit*)
		ENDIF(SUPPORT_VIDEO)

		INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
		#CF we need to be able to display images (library cover) for any media type
		#IF(SUPPORT_3DMODEL OR SUPPORT_IMAGE OR SUPPORT_VIDEO OR BUILD_APPS)
			ADD_LIB_LINKED_DIR(${OSG_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGDB_LIBRARY})
			ADD_LIB_LINKED_DIR(${OSGGA_LIBRARY})
			ADD_LIB_LINKED_DIR(${OPENTHREADS_LIBRARY})
		#ENDIF()
	ELSE()
		IF(SUPPORT_VIDEO)
			MESSAGE(FATAL_ERROR "OSG requested but not found, required version ${OSG_REQUIRED_VERSION}. Setting SUPPORT_VIDEO to OFF might help decrease the required version")
		ELSE()
			MESSAGE(FATAL_ERROR "OSG requested but not found, required version ${OSG_REQUIRED_VERSION}.")
		ENDIF()
	ENDIF()
ENDIF()

# Qt
IF ( USE_QT4 )
	FIND_PACKAGE ( Qt4 4.6.0 COMPONENTS QtCore QtGui QtOpenGL QtXml QtSvg QtNetwork QtWebkit REQUIRED)
	IF (QT4_FOUND AND QT_QTCORE_FOUND AND QT_QTGUI_FOUND AND QT_QTOPENGL_FOUND AND QT_QTXML_FOUND AND QT_QTSVG_FOUND AND QT_QTWEBKIT_FOUND)
		FIND_PACKAGE ( Qt4 COMPONENTS Phonon)
		IF(NOT QT_PHONON_FOUND)
			MESSAGE("Qt4 - Phonon not found, won't build iVisit applications.")
		ENDIF()

		MESSAGE("Qt version: ${QTVERSION}")

		INCLUDE (${QT_USE_FILE})
		MESSAGE( "Qt4 found in ${QT_LIBRARY_DIRS}: libraries ${QT_LIBRARIES} and headers ${QT_INCLUDE_DIR}" )

		IF(MINGW)
			ADD_DEFINITIONS(-DQT_STATIC)
			IF(MINGW AND CMAKE_TOOLCHAIN_FILE) # OR APPLE_IOS_XCODE OR APPLE_IOS_DEV OR APPLE_IOS_SIM
				MESSAGE( "PkgConfig found: ${PKG_CONFIG_EXECUTABLE}" )
				set(ENV{PKG_CONFIG_PATH} ${CMAKE_FIND_ROOT_PATH}/lib/pkgconfig;${CMAKE_FIND_ROOT_PATH}/qt/lib/pkgconfig)
				set(PKG_CONFIG_PATH ${CMAKE_FIND_ROOT_PATH}/lib/pkgconfig;${CMAKE_FIND_ROOT_PATH}/qt/lib/pkgconfig)
				#MESSAGE("PKG_CONFIG_PATH ${PKG_CONFIG_PATH}")
				PKG_CHECK_MODULES (QT_PKG QtCore QtGui QtOpenGL QtXml QtSvg QtNetwork)
				IF (QT_PKG_FOUND)
					MESSAGE( "Qt cflags found through pkg-config: ${QT_PKG_CFLAGS}" )
					MESSAGE( "Qt ldflags found through pkg-config: ${QT_PKG_LDFLAGS}")
					STRING(REGEX REPLACE ";" " " QT_CFLAGS "${QT_PKG_CFLAGS}")
					SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${QT_CFLAGS}")
					SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${QT_CFLAGS}")
					LIST(APPEND QT_LIBRARIES ${QT_PKG_LDFLAGS})
					MESSAGE("Qt libraries: ${QT_LIBRARIES}")
				#ELSE (QT_PKG_FOUND)
				#	MESSAGE( FATAL_ERROR "Qt cflags/ldflags not found through pkg-config." )
				ENDIF (QT_PKG_FOUND)
				include(qt)
				mxe_prepare_qt4(QtGui QtCore QtGui QtOpenGL QtXml QtSvg QtNetwork)
			ENDIF()
		ELSE ( MINGW )
			ADD_DEFINITIONS(-DQT_DLL)
			ADD_DEFINITIONS(-DQT_THREAD_SUPPORT)
		ENDIF ( MINGW )
		SET(QT_USE_PHONON FALSE)# only TRUE for videoPlayer-iVisit-qt
		foreach(DIR ${QT_LIBRARY_DIRS})
			ADD_LINKED_DIRECTORY(${DIR})
		endforeach(DIR)

		IF(OpenCV_WITH_Qt)
			MESSAGE("Appending Qt libs to OpenCV: ")
			LIST(APPEND OpenCV_LIBRARIES ${QT_LIBRARIES})
			MESSAGE("${OpenCV_LIBRARIES}")
		ENDIF()

	ELSE()
		MESSAGE(FATAL_ERROR "Qt4 not found or not complete (phonon might be missing).")
	ENDIF()
ENDIF ( USE_QT4 )

IF( USE_QT5 )
	# Find includes in corresponding build directories
        set(CMAKE_INCLUDE_CURRENT_DIR ON)
	# Instruct CMake to run moc automatically when needed.
        set(CMAKE_AUTOMOC OFF) # this is done per library or application (AddQtApp.cmake or isolated CMakeLists.txt)

        find_package(Qt5Core REQUIRED)
        find_package(Qt5Gui REQUIRED)
        find_package(Qt5OpenGL REQUIRED)
        find_package(Qt5Multimedia REQUIRED)
	find_package(Qt5Widgets REQUIRED)
	find_package(Qt5WebKitWidgets REQUIRED)

	add_definitions(${Qt5Widgets_DEFINITIONS})
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${Qt5Widgets_EXECUTABLE_COMPILE_FLAGS}")

        LIST(APPEND QT_LIBRARIES ${Qt5Core_LIBRARIES})
        LIST(APPEND QT_LIBRARIES ${Qt5Gui_LIBRARIES})
        LIST(APPEND QT_LIBRARIES ${Qt5OpenGL_LIBRARIES})
        LIST(APPEND QT_LIBRARIES ${Qt5Multimedia_LIBRARIES})
	LIST(APPEND QT_LIBRARIES ${Qt5Widgets_LIBRARIES})
	LIST(APPEND QT_LIBRARIES ${Qt5WebKitWidgets_LIBRARIES})

	MESSAGE("QT_LIBRARIES ${QT_LIBRARIES}")
ENDIF()

# Qwt
IF( USE_QT4 OR USE_QT5)
                FIND_PACKAGE ( Qwt REQUIRED)
                IF(QWT_FOUND)
                        MESSAGE( "Qwt found in ${QWT_INCLUDE_DIR} (headers) and ${QWT_LIBRARY} (library), requiring ${QWT_LIBRARIES} (libraries)" )
                        INCLUDE_DIRECTORIES( ${QWT_INCLUDE_DIR} )
                        IF(UNIX AND NOT APPLE AND "${LSB_DISTRIB}" MATCHES "Ubuntu11.10") #required for Ubuntu 11.10
                                SET(QWT_LIBRARIES ${QWT_LIBRARY} -lrt)
                        ENDIF()
                        ADD_LIB_LINKED_DIR(${QWT_LIBRARY})
                ELSE()
                        MESSAGE(FATAL_ERROR "Qwt not found.")
                ENDIF()
ENDIF()

# Cocoa
IF ( USE_COCOA )
        IF(NOT APPLE)
            MESSAGE( "Cocoa works only on Apple systems. Cocoa apps won't be built." )
            SET(USE_COCOA OFF)
        ENDIF()
ENDIF ( USE_COCOA )

# OpenAL and Portaudio
IF(SUPPORT_AUDIO AND (USE_OPENAL OR USE_PORTAUDIO))
	IF( APPLE_IOS_DEV OR APPLE_IOS_SIM )
		IF(EXISTS ${CMAKE_OSX_SYSROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ENDIF()
	ELSEIF ( APPLE_IOS_XCODE )
		IF(EXISTS ${iPhoneSimulator_SDK_ROOT}/System/Library/Frameworks/OpenAL.framework)
			SET(OPENAL_FOUND TRUE)
		ELSE()
			FIND_PACKAGE( OpenAL )
		ENDIF()
	ELSE()
		FIND_PACKAGE( OpenAL )
	ENDIF()
	FIND_PACKAGE ( Portaudio )
ENDIF()

# Since for now OpenAL support is more advanced than PortAudio support
IF(SUPPORT_AUDIO AND USE_OPENAL AND USE_PORTAUDIO)
	SET(USE_PORTAUDIO OFF)
ENDIF()

# Fallback situation 1
IF(SUPPORT_AUDIO AND NOT USE_OPENAL AND USE_PORTAUDIO AND OPENAL_FOUND AND NOT PORTAUDIO_FOUND)
	SET(USE_OPENAL ON)
	SET(USE_PORTAUDIO OFF)
ENDIF()

# Fallback situation 2
IF(SUPPORT_AUDIO AND USE_OPENAL AND NOT USE_PORTAUDIO AND NOT OPENAL_FOUND AND PORTAUDIO_FOUND)
	SET(USE_OPENAL OFF)
	SET(USE_PORTAUDIO ON)
ENDIF()

IF(SUPPORT_AUDIO AND USE_OPENAL)
	IF(OPENAL_FOUND)
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
			PKG_CHECK_MODULES (OPENAL_PKG REQUIRED openal)
			IF (OPENAL_PKG_FOUND)
				MESSAGE( "OpenAL cflags found through pkg-config: ${OPENAL_PKG_CFLAGS}" )
				MESSAGE( "OpenAL ldflags found through pkg-config: ${OPENAL_PKG_LDFLAGS}" )
				STRING(REGEX REPLACE ";" " " OPENAL_CFLAGS "${OPENAL_PKG_CFLAGS}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPENAL_CFLAGS}")
				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OPENAL_CFLAGS}")
				SET(OPENAL_LIBRARIES ${OPENAL_LIBRARY} ${OPENAL_PKG_LDFLAGS})
				MESSAGE("OpenAL libraries: ${OPENAL_LIBRARIES}")
			ELSE (OPENAL_PKG_FOUND)
				MESSAGE( FATAL_ERROR "OpenAL cflags/ldflags not found through pkg-config." )
			ENDIF (OPENAL_PKG_FOUND)
		ELSE()
			SET(OPENAL_LIBRARIES ${OPENAL_LIBRARY})
		ENDIF()

		MESSAGE ( "Found OpenAL libraries ${OPENAL_LIBRARY} / ${OPENAL_LIBRARIES} and headers in ${OPENAL_INCLUDE_DIR}" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENAL")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENAL")
		IF(OPENALEXT_FOUND)
			MESSAGE ( "Found OpenAL extensions") 
			add_definitions(-DUSE_OPENALEXT)
		ENDIF()
		IF( APPLE_IOS_DEV OR APPLE_IOS_SIM OR APPLE_IOS_XCODE )
		ELSE()
			INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR})
		ENDIF()
		ADD_LIB_LINKED_DIR(${OPENAL_LIBRARY})
	ELSE ()
		MESSAGE(FATAL_ERROR "OpenAL requested but not found (audioengine).")
	ENDIF ()
ENDIF ()
IF(SUPPORT_AUDIO AND USE_PORTAUDIO)
	IF (PORTAUDIO_FOUND)
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
			PKG_CHECK_MODULES (PORTAUDIO_PKG REQUIRED portaudio-2.0)
			IF (PORTAUDIO_PKG_FOUND)
				MESSAGE( "PortAudio cflags found through pkg-config: ${PORTAUDIO_PKG_CFLAGS}" )
				MESSAGE( "PortAudio ldflags found through pkg-config: ${PORTAUDIO_PKG_LDFLAGS}" )
				STRING(REGEX REPLACE ";" " " PORTAUDIO_CFLAGS "${PORTAUDIO_PKG_CFLAGS}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PORTAUDIO_CFLAGS}")
				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${PORTAUDIO_CFLAGS}")
				SET(PORTAUDIO_LIBRARIES ${PORTAUDIO_LIBRARY} ${PORTAUDIO_PKG_LDFLAGS})
				MESSAGE("PortAudio libraries: ${PORTAUDIO_LIBRARIES}")
			ELSE (PORTAUDIO_PKG_FOUND)
				MESSAGE( FATAL_ERROR "PortAudio cflags/ldflags not found through pkg-config." )
			ENDIF (PORTAUDIO_PKG_FOUND)
		ELSE()
			SET(PORTAUDIO_LIBRARIES ${PORTAUDIO_LIBRARY})
		ENDIF()

		MESSAGE ( "Found PortAudio libraries ${PORTAUDIO_LIBRARY} / ${PORTAUDIO_LIBRARIES} and headers in ${PORTAUDIO_INCLUDE_DIR}" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_PORTAUDIO")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_PORTAUDIO")
		INCLUDE_DIRECTORIES(${PORTAUDIO_INCLUDE_DIRS})
		ADD_LIB_LINKED_DIR(${PORTAUDIO_LIBRARY})
	ELSE ()
		MESSAGE(FATAL_ERROR "PortAudio requested but not found (audioengine).")
	ENDIF ()
ENDIF()

# libdispatch
FIND_PACKAGE( Libdispatch )
IF(LIBDISPATCH_FOUND)
	IF(USE_CORE_DISPATCH)
		ADD_DEFINITIONS(-DUSE_CORE_DISPATCH)
	ENDIF()
ELSE()
	IF( USE_CORE_DISPATCH)
		MESSAGE(FATAL_ERROR "Couldn't find libdispatch. Install it or turn USE_CORE_DISPATCH off")
	ENDIF()
ENDIF()

# Armadillo
FIND_PACKAGE ( Armadillo 3.810 REQUIRED ) 
# lowest version tested in April 2011: 0.9.8 (ubuntu maverick 10.10)
# with no major improvements over 0.9.6 that provides join_rows()/join_cols(), find() and STL-style iterators, that we use extensively
IF (ARMADILLO_FOUND)
	IF(ARMADILLO_VERSION MATCHES "1.1.90")
        	MESSAGE(FATAL_ERROR "Please update your Armadillo version. There's a clash between MediaCycle and Armadillo version 1.1.90.")
    	ENDIF()
	FILE(GLOB ARMADILLO_HAVE_RANDU ${ARMADILLO_INCLUDE_DIR}/armadillo_bits/fn_randu.hpp)
	IF(ARMADILLO_HAVE_RANDU)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DARMADILLO_HAVE_RANDU")
	    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DARMADILLO_HAVE_RANDU")
	ENDIF()
        MESSAGE("Armadillo version ${ARMADILLO_VERSION} found in ${ARMADILLO_INCLUDE_DIR} libraries ${ARMADILLO_LIBRARIES}.")
	#INCLUDE(FindPackageHandleStandardArgs)
	FIND_PACKAGE(LAPACK REQUIRED)
	IF (NOT LAPACK_FOUND)
		MESSAGE(FATAL_ERROR "LAPACK library not found, required for Armadillo.")
	ENDIF () # link with ${LAPACK_LIBRARY}
	MESSAGE("Found LAPACK: ${LAPACK_LIBRARY}")
	list(APPEND ARMADILLO_LIBRARIES ${LAPACK_LIBRARY})
	list(APPEND LAPACK_LIBRARIES ${LAPACK_LIBRARY})
	ADD_LIB_LINKED_DIR(${LAPACK_LIBRARY})
	FIND_PACKAGE(BLAS REQUIRED)
	IF (NOT BLAS_FOUND)
		MESSAGE(FATAL_ERROR "BLAS library not found, required for Armadillo.")
	ENDIF () # link with ${BLAS_LIBRARY}
	MESSAGE("Found BLAS: ${BLAS_LIBRARY}")
	list(APPEND ARMADILLO_LIBRARIES ${BLAS_LIBRARY})
        list(APPEND LAPACK_LIBRARIES ${BLAS_LIBRARY})
	ADD_LIB_LINKED_DIR(${BLAS_LIBRARIES})
	IF( MINGW OR WIN32 ) # should be if static building 
		list(APPEND ARMADILLO_LIBRARIES gfortran)
		list(APPEND LAPACK_LIBRARIES gfortran)
	ENDIF()
	FIND_PACKAGE(HDF5) # if present, armadillo builds against it automatically from version 3.4.0
    	IF(HDF5_FOUND)
		MESSAGE("HDF5 library ${HDF5_LIBRARY}")
		MESSAGE("HDF5 HL library ${HDF5_HL_LIBRARY}")
		list(APPEND ARMADILLO_LIBRARIES ${HDF5_LIBRARY} ${HDF5_HL_LIBRARY})
	ENDIF()
	MESSAGE("Found Armadillo version ${ARMADILLO_VERSION} libraries ${ARMADILLO_LIBRARIES}")
	MESSAGE("Lapack libraries ${LAPACK_LIBRARIES}")
	INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
	ADD_LIB_LINKED_DIR(${ARMADILLO_LIBRARY})

	FIND_PACKAGE(MlPack)
	IF(MLPACK_FOUND)
		FIND_PACKAGE(LibXml2 REQUIRED)
		INCLUDE_DIRECTORIES(${LIBXML2_INCLUDE_DIR})
	ENDIF()
ELSE (ARMADILLO_FOUND)
	MESSAGE(FATAL_ERROR "Armadillo not found.")
ENDIF (ARMADILLO_FOUND)

# libsamplerate
IF(SUPPORT_AUDIO AND (USE_AUDIOFEAT OR USE_AUDIOGARDEN))
FIND_PACKAGE ( Samplerate REQUIRED )
IF(SAMPLERATE_FOUND)
	MESSAGE("libsamplerate found.")
	INCLUDE_DIRECTORIES(${SAMPLERATE_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${SAMPLERATE_LINK_DIRECTORIES})
ELSE(SAMPLERATE_FOUND)
	MESSAGE("libsamplerate not found.")
ENDIF(SAMPLERATE_FOUND)
ENDIF()

# FFTW3
IF(SUPPORT_AUDIO OR SUPPORT_IMAGE OR SUPPORT_VIDEO OR BUILD_LOOPJAM_APP)
FIND_PACKAGE ( FFTW3 REQUIRED)
IF (FFTW3_FOUND)
	MESSAGE("fftw3 found.")
	INCLUDE_DIRECTORIES(${FFTW3_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${FFTW3_LINK_DIRECTORIES})
ELSE (FFTW3_FOUND)
	MESSAGE(FATAL_ERROR "fftw3 not found.")
ENDIF (FFTW3_FOUND)
ENDIF()

# OSC with liblo
IF ( USE_OSC )
	FIND_PACKAGE ( Liblo REQUIRED )
	IF (LIBLO_FOUND)
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
			PKG_CHECK_MODULES (LIBLO_PKG REQUIRED liblo)
			IF (LIBLO_PKG_FOUND)
				MESSAGE( "liblo cflags found through pkg-config: ${LIBLO_PKG_CFLAGS}" )
				MESSAGE( "liblo ldflags found through pkg-config: ${LIBLO_PKG_LDFLAGS}" )
				STRING(REGEX REPLACE ";" " " LIBLO_CFLAGS "${LIBLO_PKG_CFLAGS}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${LIBLO_CFLAGS}")
				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${LIBLO_CFLAGS}")
				SET(LIBLO_LIBRARIES ${LIBLO_LIBRARY} ${LIBLO_PKG_LDFLAGS} wsock32 ws2_32)
				MESSAGE("liblo libraries: ${LIBLO_LIBRARIES}")
			ELSE (LIBLO_PKG_FOUND)
				MESSAGE( FATAL_ERROR "liblo cflags/ldflags not found through pkg-config." )
			ENDIF (LIBLO_PKG_FOUND)
		ELSE()
			SET(LIBLO_LIBRARIES ${LIBLO_LIBRARY})
		ENDIF()

		MESSAGE ( "Found liblo libraries ${LIBLO_LIBRARY} / ${LIBLO_LIBRARIES} and headers in ${LIBLO_INCLUDE_DIR}" )
		INCLUDE_DIRECTORIES(${LIBLO_INCLUDE_DIR})
		ADD_LINKED_DIRECTORY(${LIBLO_LINK_DIRECTORIES})
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSC")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSC")
	ELSE (LIBLO_FOUND)
		MESSAGE(FATAL_ERROR "liblo not found.")
	ENDIF (LIBLO_FOUND)
ENDIF ()

# SDIF
IF ( USE_SDIF )
	FIND_PACKAGE ( SDIF )
	IF (SDIF_FOUND)
		MESSAGE("SDIF found.")
		INCLUDE_DIRECTORIES(${SDIF_INCLUDE_DIR})
		ADD_LINKED_DIRECTORY(${SDIF_LINK_DIRECTORIES})
	ELSE (SDIF_FOUND)
		MESSAGE("SDIF not found.")
		SET(USE_SDIF OFF)
	ENDIF (SDIF_FOUND)
ENDIF ()

# Octave
IF( USE_MAKAM )
	SET(USE_OCTAVE ON)
ENDIF()
IF ( USE_OCTAVE )
	FIND_PACKAGE ( Octave REQUIRED )
	IF (OCTAVE_FOUND)
		MESSAGE("Octave found.")
		INCLUDE_DIRECTORIES(${OCTAVE_INCLUDE_DIRS})
		ADD_LINKED_DIRECTORY(${OCTAVE_LINK_DIRS})
		LINK_DIRECTORIES(${OCTAVE_LINK_DIRS})
	ELSE (OCTAVE_FOUND)
                MESSAGE(FATAL_ERROR "Octave not found.")
                SET(USE_MAKAM OFF)
		#SET(USE_OCTAVE OFF)
	ENDIF (OCTAVE_FOUND)
ENDIF ()

# MATIO
FIND_PACKAGE ( MATIO )
IF (MATIO_FOUND)
    MESSAGE("libmatio found.")
    INCLUDE_DIRECTORIES(${MATIO_INCLUDE_DIR})
    ADD_LIB_LINKED_DIR(${MATIO_LIBRARY})
ELSE (MATIO_FOUND)
    MESSAGE("libmatio not found.")
ENDIF (MATIO_FOUND) 

IF(APPLE AND USE_APPLE_MULTITOUCH)
	IF (NOT APPLE_IOS_DEV AND NOT APPLE_IOS_SIM AND NOT APPLE_IOS_XCODE )
		IF(EXISTS /System/Library/PrivateFrameworks/MultitouchSupport.framework)
			MESSAGE("Found Multitouch Support Framework.")
                        SET(APPLE_MULTITOUCH_LIBRARY "/System/Library/PrivateFrameworks/MultitouchSupport.framework/MultitouchSupport")
		ELSE()
			SET(USE_APPLE_MULTITOUCH OFF)
			MESSAGE(FATAL_ERROR "Couldn't find Multitouch Support Framework.")
		ENDIF ()
	ELSE()
		MESSAGE("Apple Multitouch Support Framework not used for iOS.")
		SET(USE_APPLE_MULTITOUCH OFF)
	ENDIF ()
ENDIF ()

# OpenMP
include(CMakeForceCompiler)
IF(USE_OPENMP)
	#CMAKE_FORCE_C_COMPILER(gcc-4.2 GNU)
	#CMAKE_FORCE_CXX_COMPILER(gcc-4.2 GNU)
	FIND_PACKAGE(OpenMP) 
	IF (OPENMP_FOUND) 
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS} -D_USE_OPENMP") 
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS} -D_USE_OPENMP")
		SET(USE_OPENMP ON) 
	ELSE (OPENMP_FOUND)
		SET(USE_OPENMP OFF)
	ENDIF (OPENMP_FOUND)
ENDIF()

IF(USE_STARPU)



# StarPU http://runtime.bordeaux.inria.fr/StarPU/
FIND_PACKAGE ( StarPU )
IF (STARPU_FOUND)
	MESSAGE("StarPU found in ${STARPU_INCLUDE_DIR}.")
	IF (STARPU_USE_CPU)
		MESSAGE("StarPU compiled with CPU support.")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_STARPU_CPU")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_STARPU_CPU")
	ELSE()
		MESSAGE("StarPU not compiled with CPU support.")
	ENDIF()
		IF (STARPU_USE_OPENCL)
		MESSAGE("StarPU compiled with OpenCL support.")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_STARPU_OPENCL")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_STARPU_OPENCL")
	ELSE()
		MESSAGE("StarPU not compiled with OpenCL support.")
	ENDIF()
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_STARPU")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_STARPU")
	INCLUDE_DIRECTORIES(${STARPU_INCLUDE_DIR})
	ADD_LINKED_DIRECTORY(${STARPU_LINK_DIRECTORIES})
ELSE (STARPU_FOUND)
	MESSAGE("StarPU not found, support disabled.")
ENDIF (STARPU_FOUND)

ENDIF(USE_STARPU)

# Torch3
IF(USE_TORCH3)
	FIND_PACKAGE ( Torch3 )
	IF (TORCH3_FOUND)
		MESSAGE("Torch3 found.")
		INCLUDE_DIRECTORIES(${TORCH3_INCLUDE_DIR} ${TORCH3_INCLUDE_DIR}/torch)
		ADD_LINKED_DIRECTORY(${TORCH3_LINK_DIRECTORIES})
	ELSE (TORCH3_FOUND)
		MESSAGE(FATAL_ERROR "Torch3 not found.")
	ENDIF (TORCH3_FOUND)
ENDIF()

IF(NOT(SUPPORT_AUDIO AND ARMADILLO_FOUND AND SNDFILE_FOUND AND SAMPLERATE_FOUND AND USE_AUDIOFEAT))
	SET(USE_AUDIOFEAT OFF)
ENDIF()

IF(NOT(SUPPORT_AUDIO AND USE_AUDIOFEAT AND USE_AUDIOGARDEN))
        SET(USE_AUDIOGARDEN OFF)
ENDIF()

#CLucene
IF(SUPPORT_TEXT)
	FIND_PACKAGE ( CLucene )
	IF (CLUCENE_FOUND)
		MESSAGE("  clucene library found: ${CLUCENE_LIBRARIES}")
		IF(NOT CLUCENE_LIBRARY_SHARED) # for older versions, for instance 0.9.21b
			GET_FILENAME_COMPONENT(CLUCENE_LIBRARY_DIR ${CLUCENE_LIBRARY} PATH)
			INCLUDE_DIRECTORIES(${CLUCENE_LIBRARY_DIR}) # CLucene/clucene-config.h can reside in this directory
		ENDIF()
	ELSE(CLUCENE_FOUND)
		MESSAGE(FATAL_ERROR "CLucene not found.")
	ENDIF(CLUCENE_FOUND)
ENDIF()

# PoDoFo for PDF plugins
IF(SUPPORT_PDF)
	FIND_PACKAGE(PoDoFo REQUIRED)
	IF(PODOFO_FOUND)
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
			PKG_CHECK_MODULES (PODOFO_PKG REQUIRED podofo)
			IF (PODOFO_PKG_FOUND)
				MESSAGE( "podofo cflags found through pkg-config: ${PODOFO_PKG_CFLAGS}" )
				MESSAGE( "podofo ldflags found through pkg-config: ${PODOFO_PKG_LDFLAGS}" )
				STRING(REGEX REPLACE ";" " " PODOFO_CFLAGS "${PODOFO_PKG_CFLAGS}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${PODOFO_CFLAGS}")
				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${PODOFO_CFLAGS}")
				SET(PODOFO_LIBRARIES ${PODOFO_PKG_LDFLAGS})
				MESSAGE("podofo libraries ${PODOFO_LIBRARIES}")
			ELSE (PODOFO_PKG_FOUND)
				MESSAGE( FATAL_ERROR "podofo cflags/ldflags not found through pkg-config." )
			ENDIF (PODOFO_PKG_FOUND)
		ELSE()
			SET(PODOFO_LIBRARIES ${PODOFO_LIBRARY})
		ENDIF()

		MESSAGE ( "Found PoDoFo libraries in ${PODOFO_LIBRARY} / ${PODOFO_LIBRARIES} and headers in ${PODOFO_INCLUDE_DIR}" )
		INCLUDE_DIRECTORIES(${PODOFO_INCLUDE_DIR})
	ENDIF()
	IF(NOT PODOFO_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find PoDoFo, required for PDF support")
	ENDIF()
ENDIF()

# Yaafe dependencies
IF(SUPPORT_AUDIO AND USE_YAAFE)
	find_package(Argtable2 REQUIRED)
	find_package(DL REQUIRED)
	find_package(MPG123 REQUIRED)
	IF(NOT LAPACK_FOUND)
		find_package(LAPACK REQUIRED)
	ENDIF()
	IF(NOT ARGTABLE2_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find Argtable, required for Yaafe")
	ENDIF()
	IF(NOT DL_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find DL, required for Yaafe")
	ENDIF()
	IF(NOT MPG123_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find mpg123, required for Yaafe")
	ENDIF()
	IF(NOT LAPACK_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find Lapack, required for Yaafe")
	ENDIF()
	IF(NOT FFTW3_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find FFTW3, required for Yaafe")
	ENDIF()
	IF(NOT (ARGTABLE2_FOUND AND DL_FOUND AND SNDFILE_FOUND AND MPG123_FOUND AND LAPACK_FOUND AND FFTW3_FOUND))
		SET(USE_YAAFE OFF)
	ENDIF()
ENDIF()

# RSVG and LibXml2 for osgdb_svg
IF(USE_OSG OR SUPPORT_AUDIO) # SUPPORT_AUDIO for the waveform thumbnailer plugin
    FIND_PACKAGE(RSVG REQUIRED)
    FIND_PACKAGE(LibXml2 REQUIRED)
ENDIF()

# Google Breakpad crash reporter wrapped with Qt
IF(USE_BREAKPAD AND (USE_QT4 OR USE_QT5))
       	IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
		PKG_CHECK_MODULES (OPENSSLPKG REQUIRED openssl)
		IF (OPENSSLPKG_FOUND)
			MESSAGE( "OPENSSL cflags found through pkg-config: ${OPENSSLPKG_CFLAGS}" )
			MESSAGE( "OPENSSL ldflags found through pkg-config: ${OPENSSLPKG_LDFLAGS}" )
			STRING(REGEX REPLACE ";" " " OPENSSL_CFLAGS "${OPENSSLPKG_CFLAGS}")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OPENSSL_CFLAGS}")
			SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OPENSSL_CFLAGS}")
			SET(OPENSSL_LIBRARIES ${OPENSSLPKG_LDFLAGS})
			MESSAGE("OPENSSL_LIBRARIES ${OPENSSL_LIBRARIES}")
		ELSE (OPENSSLPKG_FOUND)
			MESSAGE( FATAL_ERROR "FreeType cflags/ldflags not found through pkg-config." )
		ENDIF (OPENSSLPKG_FOUND)
	ELSE()
		FIND_PACKAGE(OpenSSL REQUIRED)
	ENDIF()
        IF(OPENSSL_FOUND OR OPENSSLPKG_FOUND)
		MESSAGE("Found OpenSSL: ${OPENSSL_LIBRARIES}")
	ELSE()
		MESSAGE(FATAL_ERROR "Couldn't find OpenSSL, required for breakpad-qt")
	ENDIF()
	add_definitions(-DUSE_BREAKPAD)
ENDIF()

# OpenNI
IF(USE_OPENNI AND BUILD_LOOPJAM_APP)
	FIND_PACKAGE(OpenNI REQUIRED)
	IF(OPENNI_FOUND)
		INCLUDE_DIRECTORIES(${OPENNI_INCLUDE_DIR})
		MESSAGE("Found OpenNI: ${OPENNI_LIBRARIES} in ${OPENNI_INCLUDE_DIR}")
	ELSE()
		IF("${LSB_DISTRIB}" MATCHES "Ubuntu")
			MESSAGE(FATAL_ERROR "Couldn't find OpenNI, required for kinectcycle-qt.\nPlease install it by entering the following command lines on a terminal:\nsudo add-apt-repository ppa:v-launchpad-jochen-sprickerhof-de/pcl\nsudo apt-get update\nsudo apt-get install libopenni-dev")
		ELSE()
			MESSAGE(FATAL_ERROR "Couldn't find OpenNI, required for kinectcycle-qt")
		ENDIF()
	ENDIF()
ENDIF()

# GSL
IF(USE_LAUGHFEAT)
	FIND_PACKAGE(GSL REQUIRED)
	IF(GSL_FOUND)
		INCLUDE_DIRECTORIES(${GSL_INCLUDE_DIR})
		MESSAGE("Found GSL: ${GSL_LIBRARIES} in ${GSL_INCLUDE_DIR}")
	ELSE()
		MESSAGE(FATAL_ERROR "Couldn't find GSL, required for laughter features. Install GSL or turn USE_LAUGHFEAT OFF.")
	ENDIF()
ENDIF()

# Curl (Video Browser Showdown segment submissions)
OPTION(USE_VBS "Extra plugins and dependencies for the Video Browser Showdown (MMM 2013)" ON)
IF(USE_VBS)
	FIND_PACKAGE(Curl)
	IF(CURL_FOUND)
		IF(MINGW AND CMAKE_TOOLCHAIN_FILE)
			PKG_CHECK_MODULES (CURL_PKG REQUIRED libcurl)
			IF (CURL_PKG_FOUND)
				MESSAGE( "curl cflags found through pkg-config: ${CURL_PKG_CFLAGS}" )
				MESSAGE( "curl ldflags found through pkg-config: ${CURL_PKG_LDFLAGS}" )
				STRING(REGEX REPLACE ";" " " CURL_CFLAGS "${CURL_PKG_CFLAGS}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CURL_CFLAGS}")
				SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CURL_CFLAGS}")
				#SET(CURL_LIBRARIES ${CURL_LIBRARY})
				LIST(APPEND CURL_LIBRARIES ${CURL_PKG_LDFLAGS})
				MESSAGE("curl libraries ${CURL_LIBRARIES}")
			ELSE (CURL_PKG_FOUND)
				MESSAGE( FATAL_ERROR "curl cflags/ldflags not found through pkg-config." )
			ENDIF (CURL_PKG_FOUND)
		ELSE()
			SET(CURL_LIBRARIES ${CURL_LIBRARY})
		ENDIF()

		INCLUDE_DIRECTORIES(${CURL_INCLUDE_DIR})
		MESSAGE("Found Curl: ${CURL_LIBRARIES} in ${CURL_INCLUDE_DIR}")
		ADD_LINKED_DIRECTORY(${CURL_LINK_DIRECTORIES})
	ELSE()
		MESSAGE(FATAL_ERROR "Couldn't find Curl, required for submitting KIS search tasks. Install Curl or turn USE_VBS OFF.")
	ENDIF()
ENDIF()

#IF(USE_FALCON OR USE_OPENNI)
FIND_PACKAGE(LibUSB)
IF(LIBUSB_FOUND)
	INCLUDE_DIRECTORIES(${LIBUSB_INCLUDE_DIR})
	MESSAGE("Found libusb: ${LIBUSB_LIBRARIES} in ${LIBUSB_INCLUDE_DIR}")
ENDIF()
      
IF(SUPPORT_AUDIO)
	IF(UNIX)
		FIND_PACKAGE(ALSA)
		IF(ALSA_FOUND)
			INCLUDE_DIRECTORIES(${ALSA_INCLUDE_DIR})
			MESSAGE("Found ALSA: ${ALSA_LIBRARIES} in ${ALSA_INCLUDE_DIR}")
		ENDIF()
	ENDIF()
	FIND_PACKAGE(STK)
	IF(STK_FOUND)
		INCLUDE_DIRECTORIES(${STK_INCLUDE_DIR})
		SET(STK_INCLUDE_DIRS "${STK_INCLUDE_DIR}")
		MESSAGE("Found STK: ${STK_LIBRARIES} in ${STK_INCLUDE_DIRS}")
	ELSE()
                SET(STK_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/3rdparty/stk/include")
		SET(STK_LIBRARIES "stk" CACHE STRING "")
		MESSAGE("Didn't find STK, using: ${STK_LIBRARIES} in ${STK_INCLUDE_DIRS}")
	ENDIF()
ENDIF()

IF(USE_FALCON)
	IF(NOT LIBUSB_FOUND)
		MESSAGE(FATAL_ERROR "Couldn't find libusb. Install libusb or set USE_FALCON to OFF")	
	ENDIF()
	FIND_PACKAGE(Libnifalcon)
	IF(LIBNIFALCON_FOUND)
		INCLUDE_DIRECTORIES(${LIBNIFALCON_INCLUDE_DIR})
		MESSAGE("Found libnifalcon: ${LIBNIFALCON_LIBRARIES} in ${LIBNIFALCON_INCLUDE_DIR}")
	ELSE()
		MESSAGE(FATAL_ERROR "Couldn't find libnifalcon. Install libnifalcon or turn USE_FALCON OFF")
	ENDIF()
ENDIF()

#Newmat
FIND_PACKAGE(Newmat)

#########################
# INTERNAL DEPENDENCIES #
#########################

MESSAGE("\nInternal dependencies:")

# Core dependencies
INCLUDE_DIRECTORIES(3rdparty/fftooura 3rdparty/tinyxml 3rdparty/tree)

# App dependencies
IF(USE_BREAKPAD AND (USE_QT4 OR USE_QT5))
	INCLUDE_DIRECTORIES(3rdparty/breakpad-qt/handler 3rdparty/breakpad-qt/sender)
ENDIF()

# Utility functions
IF(FFMPEG_FOUND)
	INCLUDE_DIRECTORIES(3rdparty/ffmpeg)
ENDIF()
IF(OpenCV_FOUND)
	INCLUDE_DIRECTORIES(3rdparty/opencv)
ENDIF()

add_subdirectory(3rdparty)

######################
# INTERNAL LIBRARIES #
######################
MESSAGE("\nInternal libraries:")

# First, core dependencies
INCLUDE_DIRECTORIES(libs/armadillo-utils)
add_subdirectory(libs/armadillo-utils)

# Second, the MediaCycle core library
INCLUDE_DIRECTORIES(core)
add_subdirectory(core)

# Third, internal libraries:
FILE(GLOB LIB_DIRS libs/*)
FOREACH(LIB_DIR ${LIB_DIRS})
    IF(IS_DIRECTORY ${LIB_DIR})
        INCLUDE_DIRECTORIES(${LIB_DIR})
    ENDIF()
ENDFOREACH()
add_subdirectory(libs)

######################
#        MEDIA       #
######################
add_subdirectory(media)

######################
#       PLUGINS      #
######################

IF(BUILD_PLUGINS)
	SET(OSG_PLUGINS "")
	add_subdirectory(plugins)
ENDIF(BUILD_PLUGINS)

######################
#         APPS       #
######################

IF(BUILD_APPS)
	SET(OSG_PLUGINS "")
	add_subdirectory(apps)
ENDIF(BUILD_APPS)

IF(USE_AUDIOGARDEN AND USE_AUDIOFEAT)
	# Syncing with Cecile Picard's mercurial repository
	FILE(GLOB AUDIOGARDEN_REPO ../../../../../audiogarden)
	IF(AUDIOGARDEN_REPO)
		FILE(GLOB AUDIOGARDEN_REPO_CLI_DIRS ../../../../../audiogarden/audiogarden-*-cli)
		FOREACH(AUDIOGARDEN_REPO_CLI_DIR ${AUDIOGARDEN_REPO_CLI_DIRS})
			IF(IS_DIRECTORY ${AUDIOGARDEN_REPO_CLI_DIR})
				GET_FILENAME_COMPONENT(AUDIOGARDEN_REPO_CLI_DIR_NAME ${AUDIOGARDEN_REPO_CLI_DIR} NAME)
				add_subdirectory( ../../../../../audiogarden/${AUDIOGARDEN_REPO_CLI_DIR_NAME} apps/${AUDIOGARDEN_REPO_CLI_DIR_NAME})
			ENDIF()
		ENDFOREACH()
		IF(NOT AUDIOGARDEN_REPO_CLI_DIRS)
			MESSAGE("[ ] audiogarden-clis (check if your clone of Cecile Picard's audiogarden repository contains audiogarden-*-cli directories)")
		ENDIF()
	ELSE()
		MESSAGE("[ ] audiogarden-clis (optionally clone Cecile Picard's audiogarden repository: https://bitbucket.org/cclpic/audiogarden on the same root dir as for mediacycle)")
	ENDIF()	
ENDIF()

######################
#        TESTS       #
######################

IF ( BUILD_TESTS )
	add_subdirectory(tests)
ENDIF ( BUILD_TESTS )
add_subdirectory(usability)

##MESSAGE("LINKED_DIRECTORIES: ${LINKED_DIRECTORIES}")
##MESSAGE("CMAKE_SHARED_MODULE_SUFFIX: ${CMAKE_SHARED_MODULE_SUFFIX}")

######################
#   DOCUMENTATION    #
######################
# To build the documentation, you will have to enable it
# and then do "make documentation".
IF(BUILD_DOCUMENTATION)

    FIND_PACKAGE(UnixCommands REQUIRED)
    FIND_PACKAGE(Doxygen REQUIRED)
    FIND_PACKAGE(Gnuplot REQUIRED)
    FIND_PACKAGE(HTMLHelp REQUIRED)
    FIND_PACKAGE(Perl REQUIRED)
    FIND_PACKAGE(Wget REQUIRED)

    # Warning: doxygen doesn't confuse YES/NO and ON/OFF like CMake does	
    SET(GENERATE_LATEX NO)
    FIND_PACKAGE(LATEX)
    IF(PDFLATEX_COMPILER)
        SET(GENERATE_LATEX YES)
    ENDIF()

    IF(DOT)
        SET(HAVE_DOT YES)
    ELSE()
        SET(HAVE_DOT NO)
        MESSAGE(FATAL_ERROR "Graphviz dot missing.")
    ENDIF()

    SET(CALL_GRAPH NO)# if set to YES, a graphical call graph is drawn for each function showing the functions that the function directly or indirectly calls.
    SET(CALLER_GRAPH NO)# if set to YES, a graphical caller graph is drawn for each function showing the functions that the function is directly or indirectly called by. 
    OPTION(DOCUMENTATION_GRAPH_FUNCTION_CALLS "Enable graphical call/callers graphs for each function that the functions calls/are called by." ON)
    IF(DOCUMENTATION_GRAPH_FUNCTION_CALLS)
        SET(CALL_GRAPH YES)
        SET(CALLER_GRAPH YES)
    ENDIF()

    OPTION(DOCUMENTATION_HTML_HELP "Build the HTML Help file (CHM)." OFF)
    OPTION(DOCUMENTATION_HTML_TARZ "Build a compressed tar archive of the HTML doc." OFF)

    OPTION(BUILD_REF_DOCS_SEARCHENGINE "Enable doxygen's search engine (requires that documentation to be installed on a php enabled web server)" ON)
    IF(BUILD_REF_DOCS_SEARCHENGINE)
        SET(SEARCHENGINE YES)
    ELSE()
        SET(SEARCHENGINE NO)
    ENDIF()

    OPTION(BUILD_REF_DOCS_TAGFILE "Generate a tag file named mediacycle.tag on the documentation web server" OFF)
    IF(BUILD_REF_DOCS_TAGFILE)
        SET(GENERATE_TAGFILE "${CMAKE_BINARY_DIR}/doc/MediaCycleReferenceDocs/mediacycle.tag")
    ELSE()
        SET(GENERATE_TAGFILE "")
    ENDIF()
    
    # If html help generation was requested. DOCUMENTATION_HTML_HELP is defined by Documentation.cmake
    SET(GENERATE_HTMLHELP "NO")
    IF(DOCUMENTATION_HTML_HELP)
        # on windows Documentation.cmake finds the html help workshop fi it exists. On u*ix we might have it with wine but no way to point it out
        IF(NOT WIN32)
            SET(HTML_HELP_COMPILER "" CACHE FILEPATH "Enter location of the HTML help compiler to let doxygen compile html")
            MARK_AS_ADVANCED(HTML_HELP_COMPILER)
        ENDIF()
        # this var sets a proper value in .doxygen files when coniguring them below
        SET(GENERATE_HTMLHELP "YES")
    endif()
  
    # This processes our doxyfile.cmake and substitutes paths to generate
    # a final Doxyfile
    CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/doc/Doxyfiles/doxyfile.cmake
        ${PROJECT_BINARY_DIR}/doc/mediacycle.doxyfile
    )
    # copy the logo to documentations target folder
    #CONFIGURE_FILE(${PROJECT_SOURCE_DIR}/data/icons/MediaCycle.png
    #   ${PROJECT_BINARY_DIR}/doc/MediaCycleReferenceDocs/MediaCycle.png COPYONLY
    #)
    #INSTALL(FILES ${PROJECT_BINARY_DIR}/doc/${PROJECT_NAME}ReferenceDocs-${MediaCycle_VERSION}.chm DESTINATION doc OPTIONAL COMPONENT mediacycle-doc)
    INSTALL(DIRECTORY ${PROJECT_BINARY_DIR}/doc/MediaCycleReferenceDocs DESTINATION doc COMPONENT mediacycle-doc)
    
    # This creates a new target to build documentation.
    # It runs ${DOXYGEN} which is the full path and executable to
    # Doxygen on your system.
    # It runs the final generated Doxyfile against it.
    # The DOT_PATH is substituted into the Doxyfile.
    ADD_CUSTOM_TARGET(documentation ${DOXYGEN}
        ${PROJECT_BINARY_DIR}/doc/mediacycle.doxyfile
    )
ENDIF(BUILD_DOCUMENTATION)

# In case we want to make a framework distribution:
#IF(QT4_FOUND AND USE_QT4) SET(WITH_QT ON) ENDIF()
#IF(SUPPORT_AUDIO) SET(USE_AUDIO ON) ENDIF()
#IF(SUPPORT_IMAGE) SET(USE_IMAGE ON) ENDIF()
#IF(SUPPORT_VIDEO) SET(USE_VIDEO ON) ENDIF() 
#IF(SUPPORT_3DMODEL) SET(USE_3DMODEL ON) ENDIF()
#IF(SUPPORT_TEXT) SET(USE_TEXT ON) ENDIF()
#INCLUDE (${CMAKE_SOURCE_DIR}/cmake/CreatePackage.cmake)

######################
#    OSG PLUGINS     #
######################

# Issue warnings at the end for OSG plugins forked as 3rdparties
IF(XCODE)
	IF(USE_DEBUG)
		SET(BUILD_PREFIX "Debug/")
	ELSE()
		SET(BUILD_PREFIX "Release/")
	ENDIF()
ENDIF()

IF (SUPPORT_VIDEO AND BUILD_APPS)
	IF( NOT OSG_FFMPEG_PLUGIN AND ( NOT APPLE OR (NOT OSG_QUICKTIME_PLUGIN OR NOT OSG_QTKIT_PLUGIN)  ) )
		MESSAGE("\n\n -- WARNING! --")
		MESSAGE("OSG video plugins are required for visualizing videos in GUI apps.")
		IF(XCODE)
			MESSAGE("Please do the following:\n - Compile the following targets:")
			IF(QUICKTIME_FOUND AND NOT OSG_QUICKTIME_PLUGIN)
				MESSAGE("   - osg_qt")
			ENDIF()
			IF(QTKIT_FOUND AND NOT OSG_QTKIT_PLUGIN)
				MESSAGE("   - osg_QTKit")
			ENDIF()
			IF(FFMPEG_FOUND AND NOT OSG_FFMPEG_PLUGIN)
				MESSAGE("   - osg_ffmpeg")
			ENDIF()
			MESSAGE(" - In a terminal:")
		ELSE()
			MESSAGE("In a terminal:")
			IF(QUICKTIME_FOUND AND NOT OSG_QUICKTIME_PLUGIN)
				MESSAGE("   make osg_qt")
			ENDIF()
			IF(QTKIT_FOUND AND NOT OSG_QTKIT_PLUGIN)
				MESSAGE("   make osg_QTKit")
			ENDIF()
			IF(FFMPEG_FOUND AND NOT OSG_FFMPEG_PLUGIN)
				MESSAGE("   make osg_ffmpeg")
			ENDIF()
		ENDIF()
		
		IF(QUICKTIME_FOUND AND NOT OSG_QUICKTIME_PLUGIN)
			MESSAGE("   sudo cp ${CMAKE_BINARY_DIR}/3rdparty/osgdb_quicktime/${BUILD_PREFIX}*osgdb_qt.* ${OSG_LIBRARY_DIR}/osgPlugins-${OPENSCENEGRAPH_VERSION}/")
		ENDIF()
		IF(QTKIT_FOUND AND NOT OSG_QTKIT_PLUGIN)
			MESSAGE("   sudo cp ${CMAKE_BINARY_DIR}/3rdparty/osgdb_QTKit/${BUILD_PREFIX}*osgdb_QTKit.* ${OSG_LIBRARY_DIR}/osgPlugins-${OPENSCENEGRAPH_VERSION}/")
		ENDIF()
		IF(FFMPEG_FOUND AND NOT OSG_FFMPEG_PLUGIN)
			MESSAGE("   sudo cp ${CMAKE_BINARY_DIR}/3rdparty/osgdb_ffmpeg/${BUILD_PREFIX}*osgdb_ffmpeg.* ${OSG_LIBRARY_DIR}/osgPlugins-${OPENSCENEGRAPH_VERSION}/")
		ENDIF()
		MESSAGE(" -- WARNING! --\n\n")
	ENDIF()
ENDIF()


######################
#    UBUNTU PPAS     #
######################

IF(UNIX)
        IF("${LSB_DISTRIB}" MATCHES "Ubuntu")
		IF(SUPPORT_VIDEO OR SUPPORT_IMAGE)
	    		IF(("${LSB_DISTRIB}" MATCHES "Ubuntu10.04") OR ("${LSB_DISTRIB}" MATCHES "Ubuntu10.10") OR ("${LSB_DISTRIB}" MATCHES "Ubuntu11.04") OR ("${LSB_DISTRIB}" MATCHES "Ubuntu11.10"))
                		MESSAGE("\nWARNING!\nInstall up-to-date FFmpeg packages from https://launchpad.net/~jon-severinsson/+archive/ffmpeg \n")
	    		ENDIF()

	    		IF(("${LSB_DISTRIB}" MATCHES "Ubuntu11.04") OR ("${LSB_DISTRIB}" MATCHES "Ubuntu11.10"))
	        		MESSAGE("\nWARNING!\nInstall up-to-date OpenCV packages from https://launchpad.net/~gijzelaar/+archive/opencv2.3 (these are not yet using FFmpeg >= 0.8.x) \n")
	    		ENDIF()
		ENDIF()
		IF("${LSB_DISTRIB}" MATCHES "Ubuntu10.04")
			MESSAGE("\nWARNING!\nInstall up-to-date armadillo/opencv/openscenegraph/podofo/tinyxml packages from https://launchpad.net/~numediart/+archive/deps \n")
		ENDIF()
		IF(NOT USE_DEBUG)
        		IF(NOT("${LSB_DISTRIB}" MATCHES "Ubuntu10.04"))
                                MESSAGE("Packaging under this Ubuntu distribution needs testing, check definitions in cmake/CreatePackage.cmake")
			ENDIF() 
		ENDIF() 
	ENDIF()
ENDIF()

######################
#    WIN SUPPORT     #
######################

IF((MINGW OR WIN32) AND CMAKE_TOOLCHAIN_FILE)
        MESSAGE("\nWARNING!\nWindows support (cross-compiled statically with mxe.cc) is in progress, for now the recommended settings are:\n(forced in the root CMakeLists.txt) -DUSE_OPENNI=OFF -DUSE_OPENAL=OFF -DUSE_PORTAUDIO=ON \n(recommended) -DBUILD_ALL_APPS=OFF -DBUILD_ALL_SINGLE_MEDIA_APPS=ON\n")
ENDIF()
