PROJECT(MediaCycle)

IF ( WIN32 )
	SUBDIRS(core gui)
	INCLUDE_DIRECTORIES(. core)
ELSE ( WIN32 )
	SUBDIRS(core cli gui fftooura gnuplot_i lib vamp-plugin-interface)
	INCLUDE_DIRECTORIES(. core gnuplot_i)
ENDIF ( WIN32 )

# add some find scripts
# SET(CMAKE_USE_RELATIVE_PATHS YES)
SET(CMAKE_MODULE_PATH "${MediaCycle_SOURCE_DIR}/CMakeModules")
MESSAGE ( "modules in " ${CMAKE_MODULE_PATH} )

cmake_minimum_required(VERSION 2.6)
MESSAGE(${CMAKE_VERSION})

IF(COMMAND cmake_policy)
	IF ( ${CMAKE_VERSION} STRLESS "2.8.0")
		#AM: don't know which is the best, but must be < CMP0008 for cmake 2.6.0 and < CMP0012 for cmake 2.6.4
		cmake_policy(SET CMP0003 NEW) 
	ELSE ( )
		cmake_policy(SET CMP0014 NEW)
	ENDIF ( )
ENDIF(COMMAND cmake_policy)
#config
SET(PLUGIN_PREFIX "mc_")
# SET(PLUGIN_SUFFIX ".mcp") #change OS-dependent extension (so, dll, dynlib) to a fixed one (.mcp)

# Snow Leopard?
IF (APPLE)
	IF(${CMAKE_SYSTEM_VERSION} MATCHES "10.")
		SET(SNOW_LEOPARD ON)
	ENDIF()
ENDIF()

#options
OPTION(USE_DEBUG "Use Debug" ON)
#OPTION(USE_BOOST "Use Boost C++" ON) # core dependency
#OPTION(USE_OPENCV "Use OpenCV" ON) # core dependency
OPTION(USE_OPENGL "Use OpenGL" ON)
OPTION(USE_OSG "Use OpenSceneGraph" ON)
OPTION(USE_QT4 "Use Qt4 Toolkit" ON)
IF ( APPLE AND NOT SNOW_LEOPARD ) # CF: the OSG COCOA wrapper doesn't work currently
	OPTION(USE_COCOA "Use Cocoa" ON)
ENDIF ( )
OPTION(USE_OPENAL "Use OpenAL" ON)
IF ( NOT APPLE OR SNOW_LEOPARD )
	OPTION(USE_ALUT "Use ALUT" ON)
ENDIF ( )
OPTION(USE_OSC "Use OpenSoundControl" ON)
OPTION(USE_AUDIOFEAT "Using audio features" ON)
OPTION(USE_PSYCLONE "Use Psyclone" OFF)
OPTION(BUILD_APPS "Build apps" ON)
OPTION(BUILD_TESTS "Build tests" ON)
OPTION(BUILD_PLUGINS "Build plugins" ON)
OPTION(USE_AUDIOGARDEN "Use audiogarden" OFF)

IF ( UNIX )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF ( UNIX )

IF ( WIN32 )
	SET(BUILD_TESTS OFF)
	SET(BUILD_PLUGINS OFF)
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
	SET(BUILD_SHARED_LIBS OFF)
ENDIF ( WIN32 )

IF ( APPLE )
	INCLUDE_DIRECTORIES( "/opt/local/include" )
	INCLUDE_DIRECTORIES( "/opt/local" )
	LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local/lib" )
	LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/opt/local" )
ENDIF ( APPLE )

# OSC
IF ( USE_OSC )
	INCLUDE_DIRECTORIES(io)
	SUBDIRS(io)
ENDIF ( USE_OSC )

# APPS
IF ( BUILD_APPS )
	INCLUDE_DIRECTORIES(apps)
	SUBDIRS(apps)
ENDIF ( BUILD_APPS )

IF ( BUILD_TESTS )
	SUBDIRS(test tinyxml)
ENDIF ( BUILD_TESTS )

IF ( BUILD_PLUGINS )
	SUBDIRS(plugins)
ENDIF ( BUILD_PLUGINS )

IF (USE_AUDIOGARDEN)
	SUBDIRS( ../../../../../audiogarden/ )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOGARDEN")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOGARDEN")
ENDIF (USE_AUDIOGARDEN)

IF ( USE_DEBUG )
	MESSAGE( "Configured for Debug Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_DEBUG -DTI_DEBUG=1 -g")
	SET(CMAKE_BUILD_TYPE "Debug")
	SET(CMAKE_VERBOSE_MAKEFILE ON)
ELSE ( USE_DEBUG )
	MESSAGE( "Configured for Release Build")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DTI_DEBUG=0 -O0")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DTI_DEBUG=0 -O3")
	SET(CMAKE_BUILD_TYPE "Release")
ENDIF ( USE_DEBUG )

#Threads
FIND_PACKAGE ( Threads )

#Boost (serialization + system + filesystem + graph)
FIND_PACKAGE ( Boost REQUIRED COMPONENTS serialization system filesystem graph)
IF ( Boost_FOUND )
	MESSAGE( "Found boost in ${Boost_LIBRARY_DIRS}" )
	IF ( WIN32 )
		SET( Boost_USE_STATIC_LIBS ON)
	ENDIF ( WIN32 )
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_BOOST")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_BOOST")
	INCLUDE_DIRECTORIES( ${Boost_INCLUDE_DIR} )
	#LINK_DIRECTORIES( ${LINK_DIRECTORIES} ${Boost_LIBRARY_DIRS} )
ELSE ( Boost_FOUND )
	MESSAGE(FATAL_ERROR "Boost requested but not found.")
ENDIF ( Boost_FOUND )

# libsndfile
FIND_PACKAGE ( Sndfile REQUIRED )
IF (SNDFILE_FOUND)
	MESSAGE("libsndfile found.")
ELSE (SNDFILE_FOUND)
	MESSAGE(FATAL_ERROR "libsndfile required but not found.")
ENDIF (SNDFILE_FOUND)

# OpenCV
FIND_PACKAGE ( OpenCV REQUIRED COMPONENTS CV CXCORE CVAUX HIGHGUI )
IF ( OpenCV_FOUND )
	MESSAGE( "Found OpenCV libraries in ${OpenCV_LINK_DIRECTORIES}" )#${OpenCV_VERSION_MAJOR}
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OpenCV")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OpenCV")
	INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIR})
ELSE ( OpenCV_FOUND)
	MESSAGE(FATAL_ERROR "OpenCV not found.")
ENDIF ( OpenCV_FOUND )

# OpenGL
IF ( USE_OPENGL )
	FIND_PACKAGE( OpenGL )

	IF ( OPENGL_FOUND )
		MESSAGE ( "Found OpenGL" )
	ELSE ( OPENGL_FOUND )
		MESSAGE(FATAL_ERROR "OpenGL not found.")
	ENDIF ( OPENGL_FOUND )

	IF ( WIN32 )
		FIND_PACKAGE( FREEGLUT )
		IF ( FREEGLUT_FOUND )
			MESSAGE ( "Found freeglut" )
		ELSE ( FREEGLUT_FOUND )
			MESSAGE(FATAL_ERROR "freeglut not found.")
		ENDIF ( FREEGLUT_FOUND )

		IF ( OPENGL_FOUND AND FREEGLUT_FOUND)
			MESSAGE( "Found OpenGL & freeglut")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
			INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} ${FREEGLUT_INCLUDE_DIR} )
		ELSE ( OPENGL_FOUND AND FREEGLUT_FOUND )
			MESSAGE(FATAL_ERROR "OpenGL/freeglut requested but not found.")
		ENDIF ( OPENGL_FOUND AND FREEGLUT_FOUND )
	ELSE ( WIN32 )
		FIND_PACKAGE( GLUT )
		IF ( GLUT_FOUND )
			MESSAGE ( "Found GLUT" )
		ELSE ( GLUT_FOUND )
			MESSAGE(FATAL_ERROR "Glut not found.")
		ENDIF ( GLUT_FOUND )

		IF ( OPENGL_FOUND AND GLUT_FOUND)
			MESSAGE( "Found OpenGL & GLut")
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENGL")
			INCLUDE_DIRECTORIES( ${OPENGL_INCLUDE_DIR} ${GLUT_INCLUDE_DIR} )
		ELSE ( OPENGL_FOUND AND GLUT_FOUND )
			MESSAGE(FATAL_ERROR "OpenGL/Glut requested but not found.")
		ENDIF ( OPENGL_FOUND AND GLUT_FOUND )
	ENDIF ( WIN32 )
ENDIF ( USE_OPENGL )

#OSG
IF ( USE_OSG )
	FIND_PACKAGE ( OSG )
	IF ( OSG_FOUND )
		MESSAGE("Found OSG : ${OSG_LIBRARY}")
		IF ( WIN32 )
			ADD_DEFINITIONS(-DOSG_LIBRARY_STATIC)
			FIND_PACKAGE (PkgConfig)
			IF ( PKG_CONFIG_FOUND )
				MESSAGE( "PkgConfig found: ${PKG_CONFIG_EXECUTABLE}" )
				PKG_CHECK_MODULES (OSGPLUGINS REQUIRED openscenegraph-osgPlugins)
				IF (OSGPLUGINS_FOUND)
					MESSAGE( "osgPlugins ldflags found through pkg-config: ${OSGPLUGINS_LDFLAGS}" )
				ELSE (OSGPLUGINS_FOUND)
					MESSAGE( FATAL_ERROR "osgPlugins ldflags not found through pkg-config." )
				ENDIF (OSGPLUGINS_FOUND)
			ELSE ( PKG_CONFIG_FOUND )
				MESSAGE( FATAL_ERROR "pkg-config not found." )
			ENDIF ( PKG_CONFIG_FOUND )
		ENDIF ( WIN32 )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OSG")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OSG")
		INCLUDE_DIRECTORIES( ${OSG_INCLUDE_DIR} )
	ELSE ( OSG_FOUND )
		MESSAGE(FATAL_ERROR "OSG requested but not found")
	ENDIF ( OSG_FOUND )
ENDIF ( USE_OSG )

# Qt
IF ( USE_QT4 )
	FIND_PACKAGE ( Qt4 COMPONENTS QtCore QtGui QtOpenGL REQUIRED)
	IF (QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE( "Qt4 found in ${QT_LIBRARY_DIR}" )
		IF ( MINGW )
			ADD_DEFINITIONS(-DQT_STATIC)
		ELSE ( MINGW )
			ADD_DEFINITIONS(-DQT_DLL)
			ADD_DEFINITIONS(-DQT_THREAD_SUPPORT)
		ENDIF ( MINGW )
		INCLUDE (${QT_USE_FILE})
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
		SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -DUSE_QT4")
 		SET(TARGET_EXTERNAL_LIBRARIES ${QT_QTCORE_LIBRARY_RELEASE} ${QT_QTGUI_LIBRARY_RELEASE} ${QT_QTOPENGL_LIBRARY_RELEASE} )
 		INCLUDE_DIRECTORIES( ${QT4_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR} ${QT_QTOPENGL_INCLUDE_DIR})
	ELSE(QT4_FOUND AND QT_QTOPENGL_FOUND)
		MESSAGE(FATAL_ERROR "Qt 4 & QtOpenGL not found.")
	ENDIF(QT4_FOUND AND QT_QTOPENGL_FOUND)
ENDIF ( USE_QT4 )

# Cocoa
IF ( USE_COCOA )
	IF ( APPLE )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_COCOA")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_COCOA")
		MESSAGE( "TiCore required for mediacycle-osg-cocoa." )
		INCLUDE_DIRECTORIES( "/usr/local/include/TiCore" )
		LINK_DIRECTORIES( ${LINK_DIRECTORIES} "/usr/local/lib" )
	ELSE ( APPLE )
		MESSAGE( "Cocoa works only on Apple systems. Cocoa apps won't be built." )
	ENDIF ( APPLE )
ENDIF ( USE_COCOA )

# OpenAL
IF ( USE_OPENAL )
	FIND_PACKAGE( OpenAL )
	IF ( OPENAL_FOUND )
		MESSAGE ( "Found OpenAL" )
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_OPENAL")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_OPENAL")
		INCLUDE_DIRECTORIES( ${OPENAL_INCLUDE_DIR})
	ELSE ( OPENAL_FOUND)
		MESSAGE(FATAL_ERROR "OpenAL requested but not found.")
	ENDIF ( OPENAL_FOUND )

	# ALUT
	IF ( APPLE AND NOT SNOW_LEOPARD )
		MESSAGE("ALUT not yet required.")
		SUBDIRS(audioengine)
		INCLUDE_DIRECTORIES(audioengine)
	ELSE ()
		IF ( USE_ALUT )
			IF ( OPENAL_FOUND )
				FIND_PACKAGE( ALUT )
				IF ( ALUT_FOUND )
					MESSAGE ( "Found ALUT: ${ALUT_LIBRARY}" )
					SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ALUT")
					SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_ALUT")
					INCLUDE_DIRECTORIES( ${ALUT_INCLUDE_DIR})
					SUBDIRS(audioengine)
					INCLUDE_DIRECTORIES(audioengine)
				ELSE ( ALUT_FOUND)
					MESSAGE(FATAL_ERROR "ALUT requested but not found.")
				ENDIF ( ALUT_FOUND )
			ELSE (OPENAL_FOUND)
				MESSAGE(FATAL_ERROR "ALUT requires OpenAL that is not found.")
			ENDIF ( OPENAL_FOUND )
		ENDIF ( USE_ALUT )
	ENDIF ()
ENDIF ( USE_OPENAL )

# Armadillo
FIND_PACKAGE ( Armadillo )
IF (ARMADILLO_FOUND)
	MESSAGE("Armadillo found in ${ARMADILLO_INCLUDE_DIR}.")
	IF ( WIN32 )
		INCLUDE(FindPackageHandleStandardArgs)
		FIND_LIBRARY(BLAS_LIBRARY NAMES blas )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(BLAS REQUIRED BLAS_LIBRARY)
		IF (NOT BLAS_FOUND)
			MESSAGE(FATAL_ERROR "BLAS library not found, required for Armadillo.")
		ENDIF () # link with ${BLAS_LIBRARY}
		FIND_LIBRARY(LAPACK_LIBRARY NAMES lapack )
		FIND_PACKAGE_HANDLE_STANDARD_ARGS(LAPACK REQUIRED LAPACK_LIBRARY)
		IF (NOT LAPACK_FOUND)
			MESSAGE(FATAL_ERROR "LAPACK library not found, required for Armadillo.")
		ENDIF () # link with ${LAPACK_LIBRARY}
	ENDIF ( WIN32 )
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_ARMADILLO")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_ARMADILLO")
	INCLUDE_DIRECTORIES(${ARMADILLO_INCLUDE_DIR})
	SUBDIRS(armadillo)
ELSE (ARMADILLO_FOUND)
	MESSAGE(FATAL_ERROR "Armadillo not found.")
ENDIF (ARMADILLO_FOUND)

# libsamplerate
FIND_PACKAGE ( Samplerate )
IF (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate found.")
ELSE (SAMPLERATE_FOUND)
	MESSAGE("libsamplerate not found.")
ENDIF (SAMPLERATE_FOUND)

# libsdif
FIND_PACKAGE ( SDIF )
IF (SDIF_FOUND)
	MESSAGE("SDIF found.")
ELSE (SDIF_FOUND)
	MESSAGE("SDIF not found.")
ENDIF (SDIF_FOUND)

# MAT File I/O http://sf.net/projects/matio/
FIND_PACKAGE ( MATIO )
IF (MATIO_FOUND)
	MESSAGE("MATIO found.")
ELSE (MATIO_FOUND)
	MESSAGE("MATIO not found.")
ENDIF (MATIO_FOUND)

IF ( ARMADILLO_FOUND AND SAMPLERATE_FOUND AND SDIF_FOUND AND USE_AUDIOFEAT )
	MESSAGE("Building audio features plugin/lib/cli.")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_AUDIOFEAT")
	SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_AUDIOFEAT")
	INCLUDE_DIRECTORIES(${SNDFILE_INCLUDE_DIR} ${SAMPLERATE_INCLUDE_DIR} ${SDIF_INCLUDE_DIR})
	INCLUDE_DIRECTORIES(audio)
	SUBDIRS(audio)
ELSE ( )
	MESSAGE("Not building audio features plugin/lib/cli.")
	SET(USE_AUDIOFEAT OFF)
ENDIF ( )

IF (APPLE)
	IF(EXISTS /System/Library/PrivateFrameworks/MultitouchSupport.framework)
		MESSAGE("Found Multitouch Support Framework.")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_APPLE_MULTITOUCH")
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DUSE_APPLE_MULTITOUCH")
		SET(USE_APPLE_MULTITOUCH ON)
	ENDIF()
ENDIF ()

