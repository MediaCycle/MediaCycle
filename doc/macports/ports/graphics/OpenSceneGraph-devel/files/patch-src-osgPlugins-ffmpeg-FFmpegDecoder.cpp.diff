--- src/osgPlugins/ffmpeg/FFmpegDecoder.cpp.orig	2012-03-21 18:36:20.000000000 +0100
+++ src/osgPlugins/ffmpeg/FFmpegDecoder.cpp	2012-11-24 15:35:37.000000000 +0100
@@ -64,10 +64,13 @@
 
             OSG_NOTICE<<"Attempting to stream "<<filename<<std::endl;
 
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
             AVFormatParameters formatParams;
             memset(&formatParams, 0, sizeof(AVFormatParameters));
+#endif
             AVInputFormat *iformat;
 
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
             formatParams.channel = 0;
             formatParams.standard = 0;
 #if 1
@@ -76,13 +79,13 @@
 #else
             formatParams.width = 640;
             formatParams.height = 480;
-#endif
+#endif            
             formatParams.time_base.num = 1;
             formatParams.time_base.den = 30;
-
+#endif
             std::string format = "video4linux2";
             iformat = av_find_input_format(format.c_str());
-
+            
             if (iformat)
             {
                 OSG_NOTICE<<"Found input format: "<<format<<std::endl;
@@ -92,7 +95,11 @@
                 OSG_NOTICE<<"Failed to find input format: "<<format<<std::endl;
             }
 
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
             int error = av_open_input_file(&p_format_context, filename.c_str(), iformat, 0, &formatParams);
+#else
+            int error = avformat_open_input(&p_format_context, filename.c_str(), iformat, 0);
+#endif
             if (error != 0)
             {
                 std::string error_str;
@@ -115,10 +122,16 @@
         }
         else
         {
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
             AVInputFormat* av_format = (parameters ? parameters->getFormat() : 0);
             AVFormatParameters* av_params = (parameters ? parameters->getFormatParameter() : 0);
             if (av_open_input_file(&p_format_context, filename.c_str(), av_format, 0, av_params) !=0 )
                 throw std::runtime_error("av_open_input_file() failed");
+#else
+            if (avformat_open_input(&p_format_context, filename.c_str(), 0, 0) < 0 )
+                throw std::runtime_error("avformat_open_input() failed");
+#endif
+
         }
 
         m_format_context.reset(p_format_context);
@@ -134,8 +147,11 @@
         m_clocks.reset(m_start);
 
         // Dump info to stderr
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
         dump_format(p_format_context, 0, filename.c_str(), false);
-
+#else
+        av_dump_format(p_format_context, 0, filename.c_str(), false);
+#endif
         // Find and open the first video and audio streams (note that audio stream is optional and only opened if possible)
 
         findVideoStream();
@@ -292,10 +308,14 @@
         // Read the next frame packet
         if (av_read_frame(m_format_context.get(), &packet) < 0)
         {
+#if LIBAVFORMAT_BUILD < (54<<16 | 29<<8 | 0)
             if (url_ferror(m_format_context->pb) == 0)
                 end_of_stream = true;
             else
                 throw std::runtime_error("av_read_frame() failed");
+#else
+            end_of_stream = true;
+#endif
         }
 
         if (end_of_stream)
